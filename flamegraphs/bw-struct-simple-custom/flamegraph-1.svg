<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="68759"><g><title>pthread_spin_trylock@plt (9 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0131%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="415.50"></text></g><g><title>ucs_async_dispatch_timerq@plt (9 samples, 0.01%)</title><rect x="0.0131%" y="405" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="9"/><text x="0.2631%" y="415.50"></text></g><g><title>[libucs.so.0.0.0] (26 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0378%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="26"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="0.0378%" y="421" width="0.0102%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="7"/><text x="0.2878%" y="431.50"></text></g><g><title>[libucs.so.0.0.0] (7 samples, 0.01%)</title><rect x="0.0378%" y="405" width="0.0102%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="7"/><text x="0.2878%" y="415.50"></text></g><g><title>[libuct_ib.so.0.0.0] (40 samples, 0.06%)</title><rect x="0.1949%" y="309" width="0.0582%" height="15" fill="rgb(232,128,0)" fg:x="134" fg:w="40"/><text x="0.4449%" y="319.50"></text></g><g><title>[libuct_ib.so.0.0.0] (23 samples, 0.03%)</title><rect x="0.2196%" y="293" width="0.0335%" height="15" fill="rgb(207,160,47)" fg:x="151" fg:w="23"/><text x="0.4696%" y="303.50"></text></g><g><title>[libucs.so.0.0.0] (56 samples, 0.08%)</title><rect x="0.1789%" y="325" width="0.0814%" height="15" fill="rgb(228,23,34)" fg:x="123" fg:w="56"/><text x="0.4289%" y="335.50"></text></g><g><title>__pthread_rwlock_rdlock (9 samples, 0.01%)</title><rect x="0.2603%" y="325" width="0.0131%" height="15" fill="rgb(218,30,26)" fg:x="179" fg:w="9"/><text x="0.5103%" y="335.50"></text></g><g><title>__libc_malloc (15 samples, 0.02%)</title><rect x="0.2851%" y="293" width="0.0218%" height="15" fill="rgb(220,122,19)" fg:x="196" fg:w="15"/><text x="0.5351%" y="303.50"></text></g><g><title>ucs_async_dispatch_timerq (170 samples, 0.25%)</title><rect x="0.0611%" y="373" width="0.2472%" height="15" fill="rgb(250,228,42)" fg:x="42" fg:w="170"/><text x="0.3111%" y="383.50"></text></g><g><title>ucs_async_dispatch_handlers (137 samples, 0.20%)</title><rect x="0.1091%" y="357" width="0.1992%" height="15" fill="rgb(240,193,28)" fg:x="75" fg:w="137"/><text x="0.3591%" y="367.50"></text></g><g><title>[libucs.so.0.0.0] (126 samples, 0.18%)</title><rect x="0.1251%" y="341" width="0.1832%" height="15" fill="rgb(216,20,37)" fg:x="86" fg:w="126"/><text x="0.3751%" y="351.50"></text></g><g><title>ucs_mpmc_queue_push (20 samples, 0.03%)</title><rect x="0.2792%" y="325" width="0.0291%" height="15" fill="rgb(206,188,39)" fg:x="192" fg:w="20"/><text x="0.5292%" y="335.50"></text></g><g><title>ucs_malloc (19 samples, 0.03%)</title><rect x="0.2807%" y="309" width="0.0276%" height="15" fill="rgb(217,207,13)" fg:x="193" fg:w="19"/><text x="0.5307%" y="319.50"></text></g><g><title>[libucs.so.0.0.0] (15 samples, 0.02%)</title><rect x="0.3650%" y="357" width="0.0218%" height="15" fill="rgb(231,73,38)" fg:x="251" fg:w="15"/><text x="0.6150%" y="367.50"></text></g><g><title>ucs_async_pipe_drain (8 samples, 0.01%)</title><rect x="0.3752%" y="341" width="0.0116%" height="15" fill="rgb(225,20,46)" fg:x="258" fg:w="8"/><text x="0.6252%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="0.4378%" y="341" width="0.0131%" height="15" fill="rgb(210,31,41)" fg:x="301" fg:w="9"/><text x="0.6878%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="0.4378%" y="325" width="0.0131%" height="15" fill="rgb(221,200,47)" fg:x="301" fg:w="9"/><text x="0.6878%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="0.4378%" y="309" width="0.0131%" height="15" fill="rgb(226,26,5)" fg:x="301" fg:w="9"/><text x="0.6878%" y="319.50"></text></g><g><title>__libc_disable_asynccancel (33 samples, 0.05%)</title><rect x="0.4509%" y="341" width="0.0480%" height="15" fill="rgb(249,33,26)" fg:x="310" fg:w="33"/><text x="0.7009%" y="351.50"></text></g><g><title>epoll_pwait (83 samples, 0.12%)</title><rect x="0.3869%" y="357" width="0.1207%" height="15" fill="rgb(235,183,28)" fg:x="266" fg:w="83"/><text x="0.6369%" y="367.50"></text></g><g><title>ucs_event_set_wait (142 samples, 0.21%)</title><rect x="0.3083%" y="373" width="0.2065%" height="15" fill="rgb(221,5,38)" fg:x="212" fg:w="142"/><text x="0.5583%" y="383.50"></text></g><g><title>[libucs.so.0.0.0] (334 samples, 0.49%)</title><rect x="0.0509%" y="389" width="0.4858%" height="15" fill="rgb(247,18,42)" fg:x="35" fg:w="334"/><text x="0.3009%" y="399.50"></text></g><g><title>ucs_get_cpu_clocks_per_sec (15 samples, 0.02%)</title><rect x="0.5148%" y="373" width="0.0218%" height="15" fill="rgb(241,131,45)" fg:x="354" fg:w="15"/><text x="0.7648%" y="383.50"></text></g><g><title>thread_start (346 samples, 0.50%)</title><rect x="0.0480%" y="421" width="0.5032%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="346"/><text x="0.2980%" y="431.50"></text></g><g><title>start_thread (346 samples, 0.50%)</title><rect x="0.0480%" y="405" width="0.5032%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="346"/><text x="0.2980%" y="415.50"></text></g><g><title>async (385 samples, 0.56%)</title><rect x="0.0000%" y="437" width="0.5599%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="385"/><text x="0.2500%" y="447.50"></text></g><g><title>pthread_self@plt (322 samples, 0.47%)</title><rect x="0.5643%" y="405" width="0.4683%" height="15" fill="rgb(214,148,48)" fg:x="388" fg:w="322"/><text x="0.8143%" y="415.50"></text></g><g><title>pthread_spin_lock@plt (314 samples, 0.46%)</title><rect x="1.0326%" y="405" width="0.4567%" height="15" fill="rgb(232,36,49)" fg:x="710" fg:w="314"/><text x="1.2826%" y="415.50"></text></g><g><title>pthread_spin_unlock@plt (322 samples, 0.47%)</title><rect x="1.4893%" y="405" width="0.4683%" height="15" fill="rgb(209,103,24)" fg:x="1024" fg:w="322"/><text x="1.7393%" y="415.50"></text></g><g><title>[libuct_ib.so.0.0.0] (972 samples, 1.41%)</title><rect x="0.5643%" y="421" width="1.4136%" height="15" fill="rgb(229,88,8)" fg:x="388" fg:w="972"/><text x="0.8143%" y="431.50"></text></g><g><title>uct_rc_mlx5_iface_srq_post_recv@plt (14 samples, 0.02%)</title><rect x="1.9576%" y="405" width="0.0204%" height="15" fill="rgb(213,181,19)" fg:x="1346" fg:w="14"/><text x="2.2076%" y="415.50"></text></g><g><title>[unknown] (27 samples, 0.04%)</title><rect x="1.9779%" y="421" width="0.0393%" height="15" fill="rgb(254,191,54)" fg:x="1360" fg:w="27"/><text x="2.2279%" y="431.50"></text></g><g><title>ucm_sbrk (7 samples, 0.01%)</title><rect x="2.0070%" y="405" width="0.0102%" height="15" fill="rgb(241,83,37)" fg:x="1380" fg:w="7"/><text x="2.2570%" y="415.50"></text></g><g><title>[libucp.so.0.0.0] (11 samples, 0.02%)</title><rect x="2.0390%" y="245" width="0.0160%" height="15" fill="rgb(233,36,39)" fg:x="1402" fg:w="11"/><text x="2.2890%" y="255.50"></text></g><g><title>uct_md_open (10 samples, 0.01%)</title><rect x="2.0405%" y="229" width="0.0145%" height="15" fill="rgb(226,3,54)" fg:x="1403" fg:w="10"/><text x="2.2905%" y="239.50"></text></g><g><title>uct_ib_md_open (10 samples, 0.01%)</title><rect x="2.0405%" y="213" width="0.0145%" height="15" fill="rgb(245,192,40)" fg:x="1403" fg:w="10"/><text x="2.2905%" y="223.50"></text></g><g><title>[libuct_ib.so.0.0.0] (10 samples, 0.01%)</title><rect x="2.0405%" y="197" width="0.0145%" height="15" fill="rgb(238,167,29)" fg:x="1403" fg:w="10"/><text x="2.2905%" y="207.50"></text></g><g><title>ucp_init_version (13 samples, 0.02%)</title><rect x="2.0390%" y="277" width="0.0189%" height="15" fill="rgb(232,182,51)" fg:x="1402" fg:w="13"/><text x="2.2890%" y="287.50"></text></g><g><title>[libucp.so.0.0.0] (13 samples, 0.02%)</title><rect x="2.0390%" y="261" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="1402" fg:w="13"/><text x="2.2890%" y="271.50"></text></g><g><title>[libuct_ib.so.0.0.0] (12 samples, 0.02%)</title><rect x="2.0652%" y="197" width="0.0175%" height="15" fill="rgb(208,69,12)" fg:x="1420" fg:w="12"/><text x="2.3152%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (20 samples, 0.03%)</title><rect x="2.0579%" y="261" width="0.0291%" height="15" fill="rgb(235,93,37)" fg:x="1415" fg:w="20"/><text x="2.3079%" y="271.50"></text></g><g><title>ucp_worker_iface_open (16 samples, 0.02%)</title><rect x="2.0637%" y="245" width="0.0233%" height="15" fill="rgb(213,116,39)" fg:x="1419" fg:w="16"/><text x="2.3137%" y="255.50"></text></g><g><title>uct_iface_open (16 samples, 0.02%)</title><rect x="2.0637%" y="229" width="0.0233%" height="15" fill="rgb(222,207,29)" fg:x="1419" fg:w="16"/><text x="2.3137%" y="239.50"></text></g><g><title>[libuct_ib.so.0.0.0] (15 samples, 0.02%)</title><rect x="2.0652%" y="213" width="0.0218%" height="15" fill="rgb(206,96,30)" fg:x="1420" fg:w="15"/><text x="2.3152%" y="223.50"></text></g><g><title>mpicd::init (40 samples, 0.06%)</title><rect x="2.0303%" y="293" width="0.0582%" height="15" fill="rgb(218,138,4)" fg:x="1396" fg:w="40"/><text x="2.2803%" y="303.50"></text></g><g><title>ucp_worker_create (21 samples, 0.03%)</title><rect x="2.0579%" y="277" width="0.0305%" height="15" fill="rgb(250,191,14)" fg:x="1415" fg:w="21"/><text x="2.3079%" y="287.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructSimpleArray as mpicd::datatype::MessageBuffer&gt;::unpack (93 samples, 0.14%)</title><rect x="2.1394%" y="245" width="0.1353%" height="15" fill="rgb(239,60,40)" fg:x="1471" fg:w="93"/><text x="2.3894%" y="255.50"></text></g><g><title>__libc_malloc (88 samples, 0.13%)</title><rect x="2.1466%" y="229" width="0.1280%" height="15" fill="rgb(206,27,48)" fg:x="1476" fg:w="88"/><text x="2.3966%" y="239.50"></text></g><g><title>_int_malloc (41 samples, 0.06%)</title><rect x="2.2150%" y="213" width="0.0596%" height="15" fill="rgb(225,35,8)" fg:x="1523" fg:w="41"/><text x="2.4650%" y="223.50"></text></g><g><title>__libc_malloc (243 samples, 0.35%)</title><rect x="2.3357%" y="229" width="0.3534%" height="15" fill="rgb(250,213,24)" fg:x="1606" fg:w="243"/><text x="2.5857%" y="239.50"></text></g><g><title>_int_malloc (116 samples, 0.17%)</title><rect x="2.5204%" y="213" width="0.1687%" height="15" fill="rgb(247,123,22)" fg:x="1733" fg:w="116"/><text x="2.7704%" y="223.50"></text></g><g><title>unlink_chunk.isra.2 (14 samples, 0.02%)</title><rect x="2.6687%" y="197" width="0.0204%" height="15" fill="rgb(231,138,38)" fg:x="1835" fg:w="14"/><text x="2.9187%" y="207.50"></text></g><g><title>__rdl_alloc (11 samples, 0.02%)</title><rect x="2.6891%" y="229" width="0.0160%" height="15" fill="rgb(231,145,46)" fg:x="1849" fg:w="11"/><text x="2.9391%" y="239.50"></text></g><g><title>mpicd::Handle::add_message (297 samples, 0.43%)</title><rect x="2.2746%" y="245" width="0.4319%" height="15" fill="rgb(251,118,11)" fg:x="1564" fg:w="297"/><text x="2.5246%" y="255.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecState as mpicd::datatype::PackedSize&gt;::packed_size (9 samples, 0.01%)</title><rect x="2.7429%" y="229" width="0.0131%" height="15" fill="rgb(217,147,25)" fg:x="1886" fg:w="9"/><text x="2.9929%" y="239.50"></text></g><g><title>__GI_memset (1,026 samples, 1.49%)</title><rect x="2.9247%" y="213" width="1.4922%" height="15" fill="rgb(247,81,37)" fg:x="2011" fg:w="1026"/><text x="3.1747%" y="223.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="4.5318%" y="197" width="0.0407%" height="15" fill="rgb(209,12,38)" fg:x="3116" fg:w="28"/><text x="4.7818%" y="207.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="4.5318%" y="181" width="0.0407%" height="15" fill="rgb(227,1,9)" fg:x="3116" fg:w="28"/><text x="4.7818%" y="191.50"></text></g><g><title>[unknown] (28 samples, 0.04%)</title><rect x="4.5318%" y="165" width="0.0407%" height="15" fill="rgb(248,47,43)" fg:x="3116" fg:w="28"/><text x="4.7818%" y="175.50"></text></g><g><title>malloc_consolidate (10 samples, 0.01%)</title><rect x="4.5725%" y="197" width="0.0145%" height="15" fill="rgb(221,10,30)" fg:x="3144" fg:w="10"/><text x="4.8225%" y="207.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="4.6278%" y="181" width="0.0262%" height="15" fill="rgb(210,229,1)" fg:x="3182" fg:w="18"/><text x="4.8778%" y="191.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="4.6278%" y="165" width="0.0262%" height="15" fill="rgb(222,148,37)" fg:x="3182" fg:w="18"/><text x="4.8778%" y="175.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="4.6278%" y="149" width="0.0262%" height="15" fill="rgb(234,67,33)" fg:x="3182" fg:w="18"/><text x="4.8778%" y="159.50"></text></g><g><title>__sbrk (7 samples, 0.01%)</title><rect x="4.6641%" y="165" width="0.0102%" height="15" fill="rgb(247,98,35)" fg:x="3207" fg:w="7"/><text x="4.9141%" y="175.50"></text></g><g><title>syscall (9 samples, 0.01%)</title><rect x="4.7397%" y="85" width="0.0131%" height="15" fill="rgb(247,138,52)" fg:x="3259" fg:w="9"/><text x="4.9897%" y="95.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.7412%" y="69" width="0.0116%" height="15" fill="rgb(213,79,30)" fg:x="3260" fg:w="8"/><text x="4.9912%" y="79.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.7412%" y="53" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="3260" fg:w="8"/><text x="4.9912%" y="63.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="4.7412%" y="37" width="0.0116%" height="15" fill="rgb(230,62,27)" fg:x="3260" fg:w="8"/><text x="4.9912%" y="47.50"></text></g><g><title>ucm_event_dispatch (38 samples, 0.06%)</title><rect x="4.7019%" y="149" width="0.0553%" height="15" fill="rgb(216,154,8)" fg:x="3233" fg:w="38"/><text x="4.9519%" y="159.50"></text></g><g><title>[libucm.so.0.0.0] (18 samples, 0.03%)</title><rect x="4.7310%" y="133" width="0.0262%" height="15" fill="rgb(244,35,45)" fg:x="3253" fg:w="18"/><text x="4.9810%" y="143.50"></text></g><g><title>ucm_orig_sbrk (18 samples, 0.03%)</title><rect x="4.7310%" y="117" width="0.0262%" height="15" fill="rgb(251,115,12)" fg:x="3253" fg:w="18"/><text x="4.9810%" y="127.50"></text></g><g><title>ucm_orig_brk (12 samples, 0.02%)</title><rect x="4.7397%" y="101" width="0.0175%" height="15" fill="rgb(240,54,50)" fg:x="3259" fg:w="12"/><text x="4.9897%" y="111.50"></text></g><g><title>sysmalloc (130 samples, 0.19%)</title><rect x="4.5870%" y="197" width="0.1891%" height="15" fill="rgb(233,84,52)" fg:x="3154" fg:w="130"/><text x="4.8370%" y="207.50"></text></g><g><title>__default_morecore (84 samples, 0.12%)</title><rect x="4.6539%" y="181" width="0.1222%" height="15" fill="rgb(207,117,47)" fg:x="3200" fg:w="84"/><text x="4.9039%" y="191.50"></text></g><g><title>ucm_sbrk (64 samples, 0.09%)</title><rect x="4.6830%" y="165" width="0.0931%" height="15" fill="rgb(249,43,39)" fg:x="3220" fg:w="64"/><text x="4.9330%" y="175.50"></text></g><g><title>ucm_event_enter (13 samples, 0.02%)</title><rect x="4.7572%" y="149" width="0.0189%" height="15" fill="rgb(209,38,44)" fg:x="3271" fg:w="13"/><text x="5.0072%" y="159.50"></text></g><g><title>__pthread_rwlock_rdlock (13 samples, 0.02%)</title><rect x="4.7572%" y="133" width="0.0189%" height="15" fill="rgb(236,212,23)" fg:x="3271" fg:w="13"/><text x="5.0072%" y="143.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::irecv (1,836 samples, 2.67%)</title><rect x="2.1117%" y="261" width="2.6702%" height="15" fill="rgb(242,79,21)" fg:x="1452" fg:w="1836"/><text x="2.3617%" y="271.50">&lt;m..</text></g><g><title>mpicd::message::PackRecvMessage::new (1,427 samples, 2.08%)</title><rect x="2.7066%" y="245" width="2.0754%" height="15" fill="rgb(211,96,35)" fg:x="1861" fg:w="1427"/><text x="2.9566%" y="255.50">m..</text></g><g><title>calloc (1,387 samples, 2.02%)</title><rect x="2.7647%" y="229" width="2.0172%" height="15" fill="rgb(253,215,40)" fg:x="1901" fg:w="1387"/><text x="3.0147%" y="239.50">c..</text></g><g><title>_int_malloc (249 samples, 0.36%)</title><rect x="4.4198%" y="213" width="0.3621%" height="15" fill="rgb(211,81,21)" fg:x="3039" fg:w="249"/><text x="4.6698%" y="223.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (14 samples, 0.02%)</title><rect x="9.4519%" y="245" width="0.0204%" height="15" fill="rgb(208,190,38)" fg:x="6499" fg:w="14"/><text x="9.7019%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.01%)</title><rect x="9.4620%" y="229" width="0.0102%" height="15" fill="rgb(235,213,38)" fg:x="6506" fg:w="7"/><text x="9.7120%" y="239.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructSimpleState as mpicd::datatype::UnpackMethod&gt;::unpack (7,136 samples, 10.38%)</title><rect x="17.7809%" y="229" width="10.3783%" height="15" fill="rgb(237,122,38)" fg:x="12226" fg:w="7136"/><text x="18.0309%" y="239.50">&lt;mpicd_rust_ben..</text></g><g><title>__libc_malloc (82 samples, 0.12%)</title><rect x="28.1607%" y="229" width="0.1193%" height="15" fill="rgb(244,218,35)" fg:x="19363" fg:w="82"/><text x="28.4107%" y="239.50"></text></g><g><title>_int_malloc (30 samples, 0.04%)</title><rect x="28.2363%" y="213" width="0.0436%" height="15" fill="rgb(240,68,47)" fg:x="19415" fg:w="30"/><text x="28.4863%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (100 samples, 0.15%)</title><rect x="28.2799%" y="229" width="0.1454%" height="15" fill="rgb(210,16,53)" fg:x="19445" fg:w="100"/><text x="28.5299%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (90 samples, 0.13%)</title><rect x="28.2945%" y="213" width="0.1309%" height="15" fill="rgb(235,124,12)" fg:x="19455" fg:w="90"/><text x="28.5445%" y="223.50"></text></g><g><title>__libc_malloc (86 samples, 0.13%)</title><rect x="28.3003%" y="197" width="0.1251%" height="15" fill="rgb(224,169,11)" fg:x="19459" fg:w="86"/><text x="28.5503%" y="207.50"></text></g><g><title>_int_malloc (33 samples, 0.05%)</title><rect x="28.3774%" y="181" width="0.0480%" height="15" fill="rgb(250,166,2)" fg:x="19512" fg:w="33"/><text x="28.6274%" y="191.50"></text></g><g><title>rust_ucs_ptr_is_err (149 samples, 0.22%)</title><rect x="30.2273%" y="213" width="0.2167%" height="15" fill="rgb(242,216,29)" fg:x="20784" fg:w="149"/><text x="30.4773%" y="223.50"></text></g><g><title>rust_ucs_ptr_is_ptr (150 samples, 0.22%)</title><rect x="30.4440%" y="213" width="0.2182%" height="15" fill="rgb(230,116,27)" fg:x="20933" fg:w="150"/><text x="30.6940%" y="223.50"></text></g><g><title>mpicd::request::Request::status (1,774 samples, 2.58%)</title><rect x="28.4254%" y="229" width="2.5800%" height="15" fill="rgb(228,99,48)" fg:x="19545" fg:w="1774"/><text x="28.6754%" y="239.50">mp..</text></g><g><title>rust_ucs_ptr_status (236 samples, 0.34%)</title><rect x="30.6622%" y="213" width="0.3432%" height="15" fill="rgb(253,11,6)" fg:x="21083" fg:w="236"/><text x="30.9122%" y="223.50"></text></g><g><title>ucp_tag_recv_nbx (33 samples, 0.05%)</title><rect x="31.0054%" y="229" width="0.0480%" height="15" fill="rgb(247,143,39)" fg:x="21319" fg:w="33"/><text x="31.2554%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (856 samples, 1.24%)</title><rect x="34.1599%" y="213" width="1.2449%" height="15" fill="rgb(236,97,10)" fg:x="23488" fg:w="856"/><text x="34.4099%" y="223.50"></text></g><g><title>pthread_self@GLIBC_2.17 (121 samples, 0.18%)</title><rect x="55.2219%" y="197" width="0.1760%" height="15" fill="rgb(233,208,19)" fg:x="37970" fg:w="121"/><text x="55.4719%" y="207.50"></text></g><g><title>pthread_spin_lock (3,659 samples, 5.32%)</title><rect x="55.3978%" y="197" width="5.3215%" height="15" fill="rgb(216,164,2)" fg:x="38091" fg:w="3659"/><text x="55.6478%" y="207.50">pthread..</text></g><g><title>__aarch64_swp4_acq (150 samples, 0.22%)</title><rect x="60.5012%" y="181" width="0.2182%" height="15" fill="rgb(220,129,5)" fg:x="41600" fg:w="150"/><text x="60.7512%" y="191.50"></text></g><g><title>pthread_spin_unlock (127 samples, 0.18%)</title><rect x="60.7193%" y="197" width="0.1847%" height="15" fill="rgb(242,17,10)" fg:x="41750" fg:w="127"/><text x="60.9693%" y="207.50"></text></g><g><title>ucp_dt_iov_scatter (741 samples, 1.08%)</title><rect x="60.9767%" y="181" width="1.0777%" height="15" fill="rgb(242,107,0)" fg:x="41927" fg:w="741"/><text x="61.2267%" y="191.50"></text></g><g><title>__memcpy_thunderx2 (727 samples, 1.06%)</title><rect x="60.9971%" y="165" width="1.0573%" height="15" fill="rgb(251,28,31)" fg:x="41941" fg:w="727"/><text x="61.2471%" y="175.50"></text></g><g><title>ucp_eager_first_handler (801 samples, 1.16%)</title><rect x="60.9040%" y="197" width="1.1649%" height="15" fill="rgb(233,223,10)" fg:x="41877" fg:w="801"/><text x="61.1540%" y="207.50"></text></g><g><title>ucp_tag_frag_list_process_queue (10 samples, 0.01%)</title><rect x="62.0544%" y="181" width="0.0145%" height="15" fill="rgb(215,21,27)" fg:x="42668" fg:w="10"/><text x="62.3044%" y="191.50"></text></g><g><title>__libc_malloc (14 samples, 0.02%)</title><rect x="62.1679%" y="181" width="0.0204%" height="15" fill="rgb(232,23,21)" fg:x="42746" fg:w="14"/><text x="62.4179%" y="191.50"></text></g><g><title>_int_free (14 samples, 0.02%)</title><rect x="62.1882%" y="181" width="0.0204%" height="15" fill="rgb(244,5,23)" fg:x="42760" fg:w="14"/><text x="62.4382%" y="191.50"></text></g><g><title>ucp_eager_middle_handler (1,932 samples, 2.81%)</title><rect x="62.0690%" y="197" width="2.8098%" height="15" fill="rgb(226,81,46)" fg:x="42678" fg:w="1932"/><text x="62.3190%" y="207.50">uc..</text></g><g><title>ucp_dt_iov_scatter (1,834 samples, 2.67%)</title><rect x="62.2115%" y="181" width="2.6673%" height="15" fill="rgb(247,70,30)" fg:x="42776" fg:w="1834"/><text x="62.4615%" y="191.50">uc..</text></g><g><title>__memcpy_thunderx2 (1,817 samples, 2.64%)</title><rect x="62.2362%" y="165" width="2.6426%" height="15" fill="rgb(212,68,19)" fg:x="42793" fg:w="1817"/><text x="62.4862%" y="175.50">__..</text></g><g><title>[libuct_ib.so.0.0.0] (20,295 samples, 29.52%)</title><rect x="35.4048%" y="213" width="29.5161%" height="15" fill="rgb(240,187,13)" fg:x="24344" fg:w="20295"/><text x="35.6548%" y="223.50">[libuct_ib.so.0.0.0]</text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (29 samples, 0.04%)</title><rect x="64.8788%" y="197" width="0.0422%" height="15" fill="rgb(223,113,26)" fg:x="44610" fg:w="29"/><text x="65.1288%" y="207.50"></text></g><g><title>&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress (38,127 samples, 55.45%)</title><rect x="9.4722%" y="245" width="55.4502%" height="15" fill="rgb(206,192,2)" fg:x="6513" fg:w="38127"/><text x="9.7222%" y="255.50">&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress</text></g><g><title>ucp_worker_progress (23,288 samples, 33.87%)</title><rect x="31.0534%" y="229" width="33.8690%" height="15" fill="rgb(241,108,4)" fg:x="21352" fg:w="23288"/><text x="31.3034%" y="239.50">ucp_worker_progress</text></g><g><title>[libucp.so.0.0.0] (13 samples, 0.02%)</title><rect x="64.9384%" y="213" width="0.0189%" height="15" fill="rgb(247,173,49)" fg:x="44651" fg:w="13"/><text x="65.1884%" y="223.50"></text></g><g><title>uct_rc_mlx5_ep_am_bcopy (8 samples, 0.01%)</title><rect x="64.9457%" y="197" width="0.0116%" height="15" fill="rgb(224,114,35)" fg:x="44656" fg:w="8"/><text x="65.1957%" y="207.50"></text></g><g><title>ucp_tag_send_nbx (24 samples, 0.03%)</title><rect x="64.9282%" y="229" width="0.0349%" height="15" fill="rgb(245,159,27)" fg:x="44644" fg:w="24"/><text x="65.1782%" y="239.50"></text></g><g><title>&lt;mpicd::message::PackSendMessage as mpicd::message::Message&gt;::progress (30 samples, 0.04%)</title><rect x="64.9224%" y="245" width="0.0436%" height="15" fill="rgb(245,172,44)" fg:x="44640" fg:w="30"/><text x="65.1724%" y="255.50"></text></g><g><title>&lt;mpicd::request::Request as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="64.9995%" y="229" width="0.0393%" height="15" fill="rgb(236,23,11)" fg:x="44693" fg:w="27"/><text x="65.2495%" y="239.50"></text></g><g><title>ucp_request_free (22 samples, 0.03%)</title><rect x="65.0068%" y="213" width="0.0320%" height="15" fill="rgb(205,117,38)" fg:x="44698" fg:w="22"/><text x="65.2568%" y="223.50"></text></g><g><title>_int_free (96 samples, 0.14%)</title><rect x="65.0431%" y="229" width="0.1396%" height="15" fill="rgb(237,72,25)" fg:x="44723" fg:w="96"/><text x="65.2931%" y="239.50"></text></g><g><title>__aarch64_swp8_acq (9 samples, 0.01%)</title><rect x="65.7936%" y="181" width="0.0131%" height="15" fill="rgb(244,70,9)" fg:x="45239" fg:w="9"/><text x="66.0436%" y="191.50"></text></g><g><title>malloc_consolidate (253 samples, 0.37%)</title><rect x="65.4882%" y="197" width="0.3680%" height="15" fill="rgb(217,125,39)" fg:x="45029" fg:w="253"/><text x="65.7382%" y="207.50"></text></g><g><title>unlink_chunk.isra.2 (34 samples, 0.05%)</title><rect x="65.8067%" y="181" width="0.0494%" height="15" fill="rgb(235,36,10)" fg:x="45248" fg:w="34"/><text x="66.0567%" y="191.50"></text></g><g><title>ucm_event_dispatch (12 samples, 0.02%)</title><rect x="65.8634%" y="149" width="0.0175%" height="15" fill="rgb(251,123,47)" fg:x="45287" fg:w="12"/><text x="66.1134%" y="159.50"></text></g><g><title>systrim.isra.1.constprop.9 (19 samples, 0.03%)</title><rect x="65.8561%" y="197" width="0.0276%" height="15" fill="rgb(221,13,13)" fg:x="45282" fg:w="19"/><text x="66.1061%" y="207.50"></text></g><g><title>__default_morecore (15 samples, 0.02%)</title><rect x="65.8619%" y="181" width="0.0218%" height="15" fill="rgb(238,131,9)" fg:x="45286" fg:w="15"/><text x="66.1119%" y="191.50"></text></g><g><title>ucm_sbrk (15 samples, 0.02%)</title><rect x="65.8619%" y="165" width="0.0218%" height="15" fill="rgb(211,50,8)" fg:x="45286" fg:w="15"/><text x="66.1119%" y="175.50"></text></g><g><title>_int_free (482 samples, 0.70%)</title><rect x="65.2235%" y="213" width="0.7010%" height="15" fill="rgb(245,182,24)" fg:x="44847" fg:w="482"/><text x="65.4735%" y="223.50"></text></g><g><title>unlink_chunk.isra.2 (28 samples, 0.04%)</title><rect x="65.8837%" y="197" width="0.0407%" height="15" fill="rgb(242,14,37)" fg:x="45301" fg:w="28"/><text x="66.1337%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::message::PackRecvMessage&gt; (542 samples, 0.79%)</title><rect x="65.1827%" y="229" width="0.7883%" height="15" fill="rgb(246,228,12)" fg:x="44819" fg:w="542"/><text x="65.4327%" y="239.50"></text></g><g><title>free (32 samples, 0.05%)</title><rect x="65.9245%" y="213" width="0.0465%" height="15" fill="rgb(213,55,15)" fg:x="45329" fg:w="32"/><text x="66.1745%" y="223.50"></text></g><g><title>mpicd::Handle::remove_message (701 samples, 1.02%)</title><rect x="64.9660%" y="245" width="1.0195%" height="15" fill="rgb(209,9,3)" fg:x="44670" fg:w="701"/><text x="65.2160%" y="255.50"></text></g><g><title>free (9 samples, 0.01%)</title><rect x="65.9725%" y="229" width="0.0131%" height="15" fill="rgb(230,59,30)" fg:x="45362" fg:w="9"/><text x="66.2225%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (798 samples, 1.16%)</title><rect x="68.9786%" y="229" width="1.1606%" height="15" fill="rgb(209,121,21)" fg:x="47429" fg:w="798"/><text x="69.2286%" y="239.50"></text></g><g><title>pthread_self@GLIBC_2.17 (132 samples, 0.19%)</title><rect x="89.6217%" y="213" width="0.1920%" height="15" fill="rgb(220,109,13)" fg:x="61623" fg:w="132"/><text x="89.8717%" y="223.50"></text></g><g><title>pthread_spin_lock (3,646 samples, 5.30%)</title><rect x="89.8137%" y="213" width="5.3026%" height="15" fill="rgb(232,18,1)" fg:x="61755" fg:w="3646"/><text x="90.0637%" y="223.50">pthrea..</text></g><g><title>__aarch64_swp4_acq (142 samples, 0.21%)</title><rect x="94.9098%" y="197" width="0.2065%" height="15" fill="rgb(215,41,42)" fg:x="65259" fg:w="142"/><text x="95.1598%" y="207.50"></text></g><g><title>pthread_spin_unlock (133 samples, 0.19%)</title><rect x="95.1163%" y="213" width="0.1934%" height="15" fill="rgb(224,123,36)" fg:x="65401" fg:w="133"/><text x="95.3663%" y="223.50"></text></g><g><title>ucp_dt_iov_scatter (735 samples, 1.07%)</title><rect x="95.3795%" y="197" width="1.0690%" height="15" fill="rgb(240,125,3)" fg:x="65582" fg:w="735"/><text x="95.6295%" y="207.50"></text></g><g><title>__memcpy_thunderx2 (723 samples, 1.05%)</title><rect x="95.3970%" y="181" width="1.0515%" height="15" fill="rgb(205,98,50)" fg:x="65594" fg:w="723"/><text x="95.6470%" y="191.50"></text></g><g><title>ucp_eager_first_handler (789 samples, 1.15%)</title><rect x="95.3097%" y="213" width="1.1475%" height="15" fill="rgb(205,185,37)" fg:x="65534" fg:w="789"/><text x="95.5597%" y="223.50"></text></g><g><title>__libc_malloc (14 samples, 0.02%)</title><rect x="96.5677%" y="197" width="0.0204%" height="15" fill="rgb(238,207,15)" fg:x="66399" fg:w="14"/><text x="96.8177%" y="207.50"></text></g><g><title>_int_free (7 samples, 0.01%)</title><rect x="96.5881%" y="197" width="0.0102%" height="15" fill="rgb(213,199,42)" fg:x="66413" fg:w="7"/><text x="96.8381%" y="207.50"></text></g><g><title>ucp_eager_middle_handler (1,944 samples, 2.83%)</title><rect x="96.4572%" y="213" width="2.8273%" height="15" fill="rgb(235,201,11)" fg:x="66323" fg:w="1944"/><text x="96.7072%" y="223.50">uc..</text></g><g><title>ucp_dt_iov_scatter (1,847 samples, 2.69%)</title><rect x="96.5983%" y="197" width="2.6862%" height="15" fill="rgb(207,46,11)" fg:x="66420" fg:w="1847"/><text x="96.8483%" y="207.50">uc..</text></g><g><title>__memcpy_thunderx2 (1,823 samples, 2.65%)</title><rect x="96.6332%" y="181" width="2.6513%" height="15" fill="rgb(241,35,35)" fg:x="66444" fg:w="1823"/><text x="96.8832%" y="191.50">__..</text></g><g><title>[libuct_ib.so.0.0.0] (20,060 samples, 29.17%)</title><rect x="70.1435%" y="229" width="29.1744%" height="15" fill="rgb(243,32,47)" fg:x="48230" fg:w="20060"/><text x="70.3935%" y="239.50">[libuct_ib.so.0.0.0]</text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (19 samples, 0.03%)</title><rect x="99.2903%" y="213" width="0.0276%" height="15" fill="rgb(247,202,23)" fg:x="68271" fg:w="19"/><text x="99.5403%" y="223.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall (65,001 samples, 94.53%)</title><rect x="4.7863%" y="261" width="94.5345%" height="15" fill="rgb(219,102,11)" fg:x="3291" fg:w="65001"/><text x="5.0363%" y="271.50">&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall</text></g><g><title>ucp_worker_progress (22,919 samples, 33.33%)</title><rect x="65.9885%" y="245" width="33.3324%" height="15" fill="rgb(243,110,44)" fg:x="45373" fg:w="22919"/><text x="66.2385%" y="255.50">ucp_worker_progress</text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="99.3252%" y="261" width="0.0145%" height="15" fill="rgb(222,74,54)" fg:x="68295" fg:w="10"/><text x="99.5752%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (33 samples, 0.05%)</title><rect x="99.3397%" y="261" width="0.0480%" height="15" fill="rgb(216,99,12)" fg:x="68305" fg:w="33"/><text x="99.5897%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.04%)</title><rect x="99.3470%" y="245" width="0.0407%" height="15" fill="rgb(226,22,26)" fg:x="68310" fg:w="28"/><text x="99.5970%" y="255.50"></text></g><g><title>__libc_realloc (26 samples, 0.04%)</title><rect x="99.3499%" y="229" width="0.0378%" height="15" fill="rgb(217,163,10)" fg:x="68312" fg:w="26"/><text x="99.5999%" y="239.50"></text></g><g><title>_int_realloc (16 samples, 0.02%)</title><rect x="99.3644%" y="213" width="0.0233%" height="15" fill="rgb(213,25,53)" fg:x="68322" fg:w="16"/><text x="99.6144%" y="223.50"></text></g><g><title>&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body (66,903 samples, 97.30%)</title><rect x="2.0914%" y="277" width="97.3007%" height="15" fill="rgb(252,105,26)" fg:x="1438" fg:w="66903"/><text x="2.3414%" y="287.50">&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body</text></g><g><title>__libc_start_main (66,950 samples, 97.37%)</title><rect x="2.0303%" y="389" width="97.3691%" height="15" fill="rgb(220,39,43)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="399.50">__libc_start_main</text></g><g><title>main (66,950 samples, 97.37%)</title><rect x="2.0303%" y="373" width="97.3691%" height="15" fill="rgb(229,68,48)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (66,950 samples, 97.37%)</title><rect x="2.0303%" y="357" width="97.3691%" height="15" fill="rgb(252,8,32)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (66,950 samples, 97.37%)</title><rect x="2.0303%" y="341" width="97.3691%" height="15" fill="rgb(223,20,43)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (66,950 samples, 97.37%)</title><rect x="2.0303%" y="325" width="97.3691%" height="15" fill="rgb(229,81,49)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mpicd_bw::main (66,950 samples, 97.37%)</title><rect x="2.0303%" y="309" width="97.3691%" height="15" fill="rgb(236,28,36)" fg:x="1396" fg:w="66950"/><text x="2.2803%" y="319.50">mpicd_bw::main</text></g><g><title>mpicd_rust_benchmarks::bw::bw (66,910 samples, 97.31%)</title><rect x="2.0885%" y="293" width="97.3109%" height="15" fill="rgb(249,185,26)" fg:x="1436" fg:w="66910"/><text x="2.3385%" y="303.50">mpicd_rust_benchmarks::bw::bw</text></g><g><title>_start (66,960 samples, 97.38%)</title><rect x="2.0274%" y="421" width="97.3836%" height="15" fill="rgb(249,174,33)" fg:x="1394" fg:w="66960"/><text x="2.2774%" y="431.50">_start</text></g><g><title>_start (66,958 samples, 97.38%)</title><rect x="2.0303%" y="405" width="97.3807%" height="15" fill="rgb(233,201,37)" fg:x="1396" fg:w="66958"/><text x="2.2803%" y="415.50">_start</text></g><g><title>_dl_start (8 samples, 0.01%)</title><rect x="99.3994%" y="389" width="0.0116%" height="15" fill="rgb(221,78,26)" fg:x="68346" fg:w="8"/><text x="99.6494%" y="399.50"></text></g><g><title>calloc@plt (7 samples, 0.01%)</title><rect x="99.4110%" y="421" width="0.0102%" height="15" fill="rgb(250,127,30)" fg:x="68354" fg:w="7"/><text x="99.6610%" y="431.50"></text></g><g><title>free@plt (11 samples, 0.02%)</title><rect x="99.4226%" y="421" width="0.0160%" height="15" fill="rgb(230,49,44)" fg:x="68362" fg:w="11"/><text x="99.6726%" y="431.50"></text></g><g><title>malloc@plt (8 samples, 0.01%)</title><rect x="99.4386%" y="421" width="0.0116%" height="15" fill="rgb(229,67,23)" fg:x="68373" fg:w="8"/><text x="99.6886%" y="431.50"></text></g><g><title>thread_start (18 samples, 0.03%)</title><rect x="99.4546%" y="421" width="0.0262%" height="15" fill="rgb(249,83,47)" fg:x="68384" fg:w="18"/><text x="99.7046%" y="431.50"></text></g><g><title>start_thread (16 samples, 0.02%)</title><rect x="99.4575%" y="405" width="0.0233%" height="15" fill="rgb(215,43,3)" fg:x="68386" fg:w="16"/><text x="99.7075%" y="415.50"></text></g><g><title>progress_engine (10 samples, 0.01%)</title><rect x="99.4663%" y="389" width="0.0145%" height="15" fill="rgb(238,154,13)" fg:x="68392" fg:w="10"/><text x="99.7163%" y="399.50"></text></g><g><title>event_base_loop (10 samples, 0.01%)</title><rect x="99.4663%" y="373" width="0.0145%" height="15" fill="rgb(219,56,2)" fg:x="68392" fg:w="10"/><text x="99.7163%" y="383.50"></text></g><g><title>[libevent_core-2.1.so.6.0.2] (10 samples, 0.01%)</title><rect x="99.4663%" y="357" width="0.0145%" height="15" fill="rgb(233,0,4)" fg:x="68392" fg:w="10"/><text x="99.7163%" y="367.50"></text></g><g><title>ucp_eager_first_handler (11 samples, 0.02%)</title><rect x="99.4953%" y="421" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="68412" fg:w="11"/><text x="99.7453%" y="431.50"></text></g><g><title>ucp_tag_frag_list_process_queue@plt (7 samples, 0.01%)</title><rect x="99.5012%" y="405" width="0.0102%" height="15" fill="rgb(250,79,13)" fg:x="68416" fg:w="7"/><text x="99.7512%" y="415.50"></text></g><g><title>ucp_eager_middle_handler (13 samples, 0.02%)</title><rect x="99.5113%" y="421" width="0.0189%" height="15" fill="rgb(211,146,34)" fg:x="68423" fg:w="13"/><text x="99.7613%" y="431.50"></text></g><g><title>ucp_worker_progress@plt (315 samples, 0.46%)</title><rect x="99.5375%" y="421" width="0.4581%" height="15" fill="rgb(228,22,38)" fg:x="68441" fg:w="315"/><text x="99.7875%" y="431.50"></text></g><g><title>all (68,759 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="68759"/><text x="0.2500%" y="463.50"></text></g><g><title>mpicd_bw (68,374 samples, 99.44%)</title><rect x="0.5599%" y="437" width="99.4401%" height="15" fill="rgb(221,155,16)" fg:x="385" fg:w="68374"/><text x="0.8099%" y="447.50">mpicd_bw</text></g></svg></svg>