<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="38203"><g><title>[libucs.so.0.0.0] (13 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0340%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="13"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0340%" y="373" width="0.0105%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="4"/><text x="0.2840%" y="383.50"></text></g><g><title>[libucs.so.0.0.0] (4 samples, 0.01%)</title><rect x="0.0340%" y="357" width="0.0105%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="4"/><text x="0.2840%" y="367.50"></text></g><g><title>pthread_rwlock_rdlock@plt (4 samples, 0.01%)</title><rect x="0.0340%" y="341" width="0.0105%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="4"/><text x="0.2840%" y="351.50"></text></g><g><title>pthread_spin_lock (5 samples, 0.01%)</title><rect x="0.1335%" y="309" width="0.0131%" height="15" fill="rgb(208,68,35)" fg:x="51" fg:w="5"/><text x="0.3835%" y="319.50"></text></g><g><title>[libuct_ib.so.0.0.0] (22 samples, 0.06%)</title><rect x="0.2539%" y="261" width="0.0576%" height="15" fill="rgb(232,128,0)" fg:x="97" fg:w="22"/><text x="0.5039%" y="271.50"></text></g><g><title>[libuct_ib.so.0.0.0] (13 samples, 0.03%)</title><rect x="0.2775%" y="245" width="0.0340%" height="15" fill="rgb(207,160,47)" fg:x="106" fg:w="13"/><text x="0.5275%" y="255.50"></text></g><g><title>[libucs.so.0.0.0] (30 samples, 0.08%)</title><rect x="0.2382%" y="277" width="0.0785%" height="15" fill="rgb(228,23,34)" fg:x="91" fg:w="30"/><text x="0.4882%" y="287.50"></text></g><g><title>__pthread_rwlock_rdlock (6 samples, 0.02%)</title><rect x="0.3167%" y="277" width="0.0157%" height="15" fill="rgb(218,30,26)" fg:x="121" fg:w="6"/><text x="0.5667%" y="287.50"></text></g><g><title>ucs_async_dispatch_timerq (102 samples, 0.27%)</title><rect x="0.0785%" y="325" width="0.2670%" height="15" fill="rgb(220,122,19)" fg:x="30" fg:w="102"/><text x="0.3285%" y="335.50"></text></g><g><title>ucs_async_dispatch_handlers (76 samples, 0.20%)</title><rect x="0.1466%" y="309" width="0.1989%" height="15" fill="rgb(250,228,42)" fg:x="56" fg:w="76"/><text x="0.3966%" y="319.50"></text></g><g><title>[libucs.so.0.0.0] (70 samples, 0.18%)</title><rect x="0.1623%" y="293" width="0.1832%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="70"/><text x="0.4123%" y="303.50"></text></g><g><title>ucs_mpmc_queue_push (5 samples, 0.01%)</title><rect x="0.3324%" y="277" width="0.0131%" height="15" fill="rgb(216,20,37)" fg:x="127" fg:w="5"/><text x="0.5824%" y="287.50"></text></g><g><title>[libucs.so.0.0.0] (10 samples, 0.03%)</title><rect x="0.4083%" y="309" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="156" fg:w="10"/><text x="0.6583%" y="319.50"></text></g><g><title>ucs_async_pipe_drain (5 samples, 0.01%)</title><rect x="0.4214%" y="293" width="0.0131%" height="15" fill="rgb(217,207,13)" fg:x="161" fg:w="5"/><text x="0.6714%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.4633%" y="293" width="0.0105%" height="15" fill="rgb(231,73,38)" fg:x="177" fg:w="4"/><text x="0.7133%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.4633%" y="277" width="0.0105%" height="15" fill="rgb(225,20,46)" fg:x="177" fg:w="4"/><text x="0.7133%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.4633%" y="261" width="0.0105%" height="15" fill="rgb(210,31,41)" fg:x="177" fg:w="4"/><text x="0.7133%" y="271.50"></text></g><g><title>__libc_disable_asynccancel (10 samples, 0.03%)</title><rect x="0.4738%" y="293" width="0.0262%" height="15" fill="rgb(221,200,47)" fg:x="181" fg:w="10"/><text x="0.7238%" y="303.50"></text></g><g><title>epoll_pwait (27 samples, 0.07%)</title><rect x="0.4345%" y="309" width="0.0707%" height="15" fill="rgb(226,26,5)" fg:x="166" fg:w="27"/><text x="0.6845%" y="319.50"></text></g><g><title>ucs_event_set_wait (63 samples, 0.16%)</title><rect x="0.3455%" y="325" width="0.1649%" height="15" fill="rgb(249,33,26)" fg:x="132" fg:w="63"/><text x="0.5955%" y="335.50"></text></g><g><title>[libucs.so.0.0.0] (179 samples, 0.47%)</title><rect x="0.0524%" y="341" width="0.4685%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="179"/><text x="0.3024%" y="351.50"></text></g><g><title>ucs_get_cpu_clocks_per_sec (4 samples, 0.01%)</title><rect x="0.5104%" y="325" width="0.0105%" height="15" fill="rgb(221,5,38)" fg:x="195" fg:w="4"/><text x="0.7604%" y="335.50"></text></g><g><title>thread_start (187 samples, 0.49%)</title><rect x="0.0471%" y="373" width="0.4895%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="187"/><text x="0.2971%" y="383.50"></text></g><g><title>start_thread (187 samples, 0.49%)</title><rect x="0.0471%" y="357" width="0.4895%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="187"/><text x="0.2971%" y="367.50"></text></g><g><title>ucs_async_dispatch_timerq (5 samples, 0.01%)</title><rect x="0.5235%" y="341" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="200" fg:w="5"/><text x="0.7735%" y="351.50"></text></g><g><title>async (210 samples, 0.55%)</title><rect x="0.0000%" y="389" width="0.5497%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="210"/><text x="0.2500%" y="399.50"></text></g><g><title>ucs_malloc (4 samples, 0.01%)</title><rect x="0.5392%" y="373" width="0.0105%" height="15" fill="rgb(238,160,17)" fg:x="206" fg:w="4"/><text x="0.7892%" y="383.50"></text></g><g><title>pthread_self@plt (104 samples, 0.27%)</title><rect x="0.5602%" y="357" width="0.2722%" height="15" fill="rgb(214,148,48)" fg:x="214" fg:w="104"/><text x="0.8102%" y="367.50"></text></g><g><title>pthread_spin_lock@plt (114 samples, 0.30%)</title><rect x="0.8324%" y="357" width="0.2984%" height="15" fill="rgb(232,36,49)" fg:x="318" fg:w="114"/><text x="1.0824%" y="367.50"></text></g><g><title>pthread_spin_unlock@plt (107 samples, 0.28%)</title><rect x="1.1308%" y="357" width="0.2801%" height="15" fill="rgb(209,103,24)" fg:x="432" fg:w="107"/><text x="1.3808%" y="367.50"></text></g><g><title>[libuct_ib.so.0.0.0] (327 samples, 0.86%)</title><rect x="0.5602%" y="373" width="0.8560%" height="15" fill="rgb(229,88,8)" fg:x="214" fg:w="327"/><text x="0.8102%" y="383.50"></text></g><g><title>&lt;mpicd::message::ContiguousSendMessage as mpicd::message::Message&gt;::progress (9 samples, 0.02%)</title><rect x="1.4161%" y="357" width="0.0236%" height="15" fill="rgb(213,181,19)" fg:x="541" fg:w="9"/><text x="1.6661%" y="367.50"></text></g><g><title>[libucp.so.0.0.0] (9 samples, 0.02%)</title><rect x="1.4161%" y="341" width="0.0236%" height="15" fill="rgb(254,191,54)" fg:x="541" fg:w="9"/><text x="1.6661%" y="351.50"></text></g><g><title>ucp_request_memory_reg@plt (9 samples, 0.02%)</title><rect x="1.4161%" y="325" width="0.0236%" height="15" fill="rgb(241,83,37)" fg:x="541" fg:w="9"/><text x="1.6661%" y="335.50"></text></g><g><title>memcpy@plt (8 samples, 0.02%)</title><rect x="1.4554%" y="341" width="0.0209%" height="15" fill="rgb(233,36,39)" fg:x="556" fg:w="8"/><text x="1.7054%" y="351.50"></text></g><g><title>[unknown] (28 samples, 0.07%)</title><rect x="1.4161%" y="373" width="0.0733%" height="15" fill="rgb(226,3,54)" fg:x="541" fg:w="28"/><text x="1.6661%" y="383.50"></text></g><g><title>uct_rc_mlx5_ep_am_zcopy (13 samples, 0.03%)</title><rect x="1.4554%" y="357" width="0.0340%" height="15" fill="rgb(245,192,40)" fg:x="556" fg:w="13"/><text x="1.7054%" y="367.50"></text></g><g><title>pthread_spin_unlock@plt (4 samples, 0.01%)</title><rect x="1.4789%" y="341" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="565" fg:w="4"/><text x="1.7289%" y="351.50"></text></g><g><title>mpicd::create_endpoint (8 samples, 0.02%)</title><rect x="1.4946%" y="229" width="0.0209%" height="15" fill="rgb(232,182,51)" fg:x="571" fg:w="8"/><text x="1.7446%" y="239.50"></text></g><g><title>ucp_ep_create (7 samples, 0.02%)</title><rect x="1.4973%" y="213" width="0.0183%" height="15" fill="rgb(231,60,39)" fg:x="572" fg:w="7"/><text x="1.7473%" y="223.50"></text></g><g><title>ucp_ep_create_to_worker_addr (4 samples, 0.01%)</title><rect x="1.5051%" y="197" width="0.0105%" height="15" fill="rgb(208,69,12)" fg:x="575" fg:w="4"/><text x="1.7551%" y="207.50"></text></g><g><title>ucp_wireup_init_lanes (4 samples, 0.01%)</title><rect x="1.5051%" y="181" width="0.0105%" height="15" fill="rgb(235,93,37)" fg:x="575" fg:w="4"/><text x="1.7551%" y="191.50"></text></g><g><title>mpicd::pmi::PMI::init (7 samples, 0.02%)</title><rect x="1.5156%" y="229" width="0.0183%" height="15" fill="rgb(213,116,39)" fg:x="579" fg:w="7"/><text x="1.7656%" y="239.50"></text></g><g><title>PMIx_Init (7 samples, 0.02%)</title><rect x="1.5156%" y="213" width="0.0183%" height="15" fill="rgb(222,207,29)" fg:x="579" fg:w="7"/><text x="1.7656%" y="223.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.17 (5 samples, 0.01%)</title><rect x="1.5208%" y="197" width="0.0131%" height="15" fill="rgb(206,96,30)" fg:x="581" fg:w="5"/><text x="1.7708%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.01%)</title><rect x="1.5339%" y="197" width="0.0105%" height="15" fill="rgb(218,138,4)" fg:x="586" fg:w="4"/><text x="1.7839%" y="207.50"></text></g><g><title>uct_md_open (4 samples, 0.01%)</title><rect x="1.5339%" y="181" width="0.0105%" height="15" fill="rgb(250,191,14)" fg:x="586" fg:w="4"/><text x="1.7839%" y="191.50"></text></g><g><title>uct_ib_md_open (4 samples, 0.01%)</title><rect x="1.5339%" y="165" width="0.0105%" height="15" fill="rgb(239,60,40)" fg:x="586" fg:w="4"/><text x="1.7839%" y="175.50"></text></g><g><title>[libuct_ib.so.0.0.0] (4 samples, 0.01%)</title><rect x="1.5339%" y="149" width="0.0105%" height="15" fill="rgb(206,27,48)" fg:x="586" fg:w="4"/><text x="1.7839%" y="159.50"></text></g><g><title>ucp_init_version (5 samples, 0.01%)</title><rect x="1.5339%" y="229" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="586" fg:w="5"/><text x="1.7839%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (5 samples, 0.01%)</title><rect x="1.5339%" y="213" width="0.0131%" height="15" fill="rgb(250,213,24)" fg:x="586" fg:w="5"/><text x="1.7839%" y="223.50"></text></g><g><title>ucp_worker_iface_init (5 samples, 0.01%)</title><rect x="1.5470%" y="197" width="0.0131%" height="15" fill="rgb(247,123,22)" fg:x="591" fg:w="5"/><text x="1.7970%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (5 samples, 0.01%)</title><rect x="1.5470%" y="181" width="0.0131%" height="15" fill="rgb(231,138,38)" fg:x="591" fg:w="5"/><text x="1.7970%" y="191.50"></text></g><g><title>[libuct_ib.so.0.0.0] (5 samples, 0.01%)</title><rect x="1.5601%" y="181" width="0.0131%" height="15" fill="rgb(231,145,46)" fg:x="596" fg:w="5"/><text x="1.8101%" y="191.50"></text></g><g><title>uct_ud_iface_query (5 samples, 0.01%)</title><rect x="1.5601%" y="165" width="0.0131%" height="15" fill="rgb(251,118,11)" fg:x="596" fg:w="5"/><text x="1.8101%" y="175.50"></text></g><g><title>uct_ib_iface_query (5 samples, 0.01%)</title><rect x="1.5601%" y="149" width="0.0131%" height="15" fill="rgb(217,147,25)" fg:x="596" fg:w="5"/><text x="1.8101%" y="159.50"></text></g><g><title>uct_ib_device_get_roce_lag_level (5 samples, 0.01%)</title><rect x="1.5601%" y="133" width="0.0131%" height="15" fill="rgb(247,81,37)" fg:x="596" fg:w="5"/><text x="1.8101%" y="143.50"></text></g><g><title>uct_ib_device_get_roce_ndev_name (4 samples, 0.01%)</title><rect x="1.5627%" y="117" width="0.0105%" height="15" fill="rgb(209,12,38)" fg:x="597" fg:w="4"/><text x="1.8127%" y="127.50"></text></g><g><title>ucs_read_file_str (4 samples, 0.01%)</title><rect x="1.5627%" y="101" width="0.0105%" height="15" fill="rgb(227,1,9)" fg:x="597" fg:w="4"/><text x="1.8127%" y="111.50"></text></g><g><title>[libucs.so.0.0.0] (4 samples, 0.01%)</title><rect x="1.5627%" y="85" width="0.0105%" height="15" fill="rgb(248,47,43)" fg:x="597" fg:w="4"/><text x="1.8127%" y="95.50"></text></g><g><title>uct_iface_open (4 samples, 0.01%)</title><rect x="1.5732%" y="181" width="0.0105%" height="15" fill="rgb(221,10,30)" fg:x="601" fg:w="4"/><text x="1.8232%" y="191.50"></text></g><g><title>[libuct_ib.so.0.0.0] (4 samples, 0.01%)</title><rect x="1.5732%" y="165" width="0.0105%" height="15" fill="rgb(210,229,1)" fg:x="601" fg:w="4"/><text x="1.8232%" y="175.50"></text></g><g><title>[libucp.so.0.0.0] (19 samples, 0.05%)</title><rect x="1.5470%" y="213" width="0.0497%" height="15" fill="rgb(222,148,37)" fg:x="591" fg:w="19"/><text x="1.7970%" y="223.50"></text></g><g><title>ucp_worker_iface_open (14 samples, 0.04%)</title><rect x="1.5601%" y="197" width="0.0366%" height="15" fill="rgb(234,67,33)" fg:x="596" fg:w="14"/><text x="1.8101%" y="207.50"></text></g><g><title>uct_md_iface_config_read (5 samples, 0.01%)</title><rect x="1.5836%" y="181" width="0.0131%" height="15" fill="rgb(247,98,35)" fg:x="605" fg:w="5"/><text x="1.8336%" y="191.50"></text></g><g><title>uct_config_read (5 samples, 0.01%)</title><rect x="1.5836%" y="165" width="0.0131%" height="15" fill="rgb(247,138,52)" fg:x="605" fg:w="5"/><text x="1.8336%" y="175.50"></text></g><g><title>ucs_config_parser_fill_opts (5 samples, 0.01%)</title><rect x="1.5836%" y="149" width="0.0131%" height="15" fill="rgb(213,79,30)" fg:x="605" fg:w="5"/><text x="1.8336%" y="159.50"></text></g><g><title>ucs_config_parser_set_default_values (5 samples, 0.01%)</title><rect x="1.5836%" y="133" width="0.0131%" height="15" fill="rgb(246,177,23)" fg:x="605" fg:w="5"/><text x="1.8336%" y="143.50"></text></g><g><title>ucs_config_parser_set_default_values (5 samples, 0.01%)</title><rect x="1.5836%" y="117" width="0.0131%" height="15" fill="rgb(230,62,27)" fg:x="605" fg:w="5"/><text x="1.8336%" y="127.50"></text></g><g><title>mpicd::init (40 samples, 0.10%)</title><rect x="1.4946%" y="245" width="0.1047%" height="15" fill="rgb(216,154,8)" fg:x="571" fg:w="40"/><text x="1.7446%" y="255.50"></text></g><g><title>ucp_worker_create (20 samples, 0.05%)</title><rect x="1.5470%" y="229" width="0.0524%" height="15" fill="rgb(244,35,45)" fg:x="591" fg:w="20"/><text x="1.7970%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="1.5994%" y="229" width="0.0131%" height="15" fill="rgb(251,115,12)" fg:x="611" fg:w="5"/><text x="1.8494%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::System&gt; (5 samples, 0.01%)</title><rect x="1.5994%" y="213" width="0.0131%" height="15" fill="rgb(240,54,50)" fg:x="611" fg:w="5"/><text x="1.8494%" y="223.50"></text></g><g><title>__libc_malloc (194 samples, 0.51%)</title><rect x="1.8088%" y="181" width="0.5078%" height="15" fill="rgb(233,84,52)" fg:x="691" fg:w="194"/><text x="2.0588%" y="191.50"></text></g><g><title>_int_malloc (109 samples, 0.29%)</title><rect x="2.0313%" y="165" width="0.2853%" height="15" fill="rgb(207,117,47)" fg:x="776" fg:w="109"/><text x="2.2813%" y="175.50"></text></g><g><title>unlink_chunk.isra.2 (21 samples, 0.05%)</title><rect x="2.2616%" y="149" width="0.0550%" height="15" fill="rgb(249,43,39)" fg:x="864" fg:w="21"/><text x="2.5116%" y="159.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::isend (255 samples, 0.67%)</title><rect x="1.6569%" y="213" width="0.6675%" height="15" fill="rgb(209,38,44)" fg:x="633" fg:w="255"/><text x="1.9069%" y="223.50"></text></g><g><title>mpicd::Handle::add_message (209 samples, 0.55%)</title><rect x="1.7773%" y="197" width="0.5471%" height="15" fill="rgb(236,212,23)" fg:x="679" fg:w="209"/><text x="2.0273%" y="207.50"></text></g><g><title>__libc_malloc (5 samples, 0.01%)</title><rect x="5.2457%" y="181" width="0.0131%" height="15" fill="rgb(242,79,21)" fg:x="2004" fg:w="5"/><text x="5.4957%" y="191.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (8 samples, 0.02%)</title><rect x="5.2457%" y="197" width="0.0209%" height="15" fill="rgb(211,96,35)" fg:x="2004" fg:w="8"/><text x="5.4957%" y="207.50"></text></g><g><title>__libc_malloc (94 samples, 0.25%)</title><rect x="5.6619%" y="181" width="0.2461%" height="15" fill="rgb(253,215,40)" fg:x="2163" fg:w="94"/><text x="5.9119%" y="191.50"></text></g><g><title>_int_malloc (41 samples, 0.11%)</title><rect x="5.8006%" y="165" width="0.1073%" height="15" fill="rgb(211,81,21)" fg:x="2216" fg:w="41"/><text x="6.0506%" y="175.50"></text></g><g><title>rust_ucp_dt_make_contig (4 samples, 0.01%)</title><rect x="5.9131%" y="181" width="0.0105%" height="15" fill="rgb(208,190,38)" fg:x="2259" fg:w="4"/><text x="6.1631%" y="191.50"></text></g><g><title>ucp_request_memory_reg (92 samples, 0.24%)</title><rect x="7.0361%" y="149" width="0.2408%" height="15" fill="rgb(235,213,38)" fg:x="2688" fg:w="92"/><text x="7.2861%" y="159.50"></text></g><g><title>ucp_mem_rereg_mds (50 samples, 0.13%)</title><rect x="7.1460%" y="133" width="0.1309%" height="15" fill="rgb(237,122,38)" fg:x="2730" fg:w="50"/><text x="7.3960%" y="143.50"></text></g><g><title>__memcpy_thunderx2 (11 samples, 0.03%)</title><rect x="11.6745%" y="133" width="0.0288%" height="15" fill="rgb(244,218,35)" fg:x="4460" fg:w="11"/><text x="11.9245%" y="143.50"></text></g><g><title>pthread_spin_lock (85 samples, 0.22%)</title><rect x="11.7033%" y="133" width="0.2225%" height="15" fill="rgb(240,68,47)" fg:x="4471" fg:w="85"/><text x="11.9533%" y="143.50"></text></g><g><title>[libucp.so.0.0.0] (2,245 samples, 5.88%)</title><rect x="6.0571%" y="165" width="5.8765%" height="15" fill="rgb(210,16,53)" fg:x="2314" fg:w="2245"/><text x="6.3071%" y="175.50">[libucp..</text></g><g><title>uct_rc_mlx5_ep_am_zcopy (1,779 samples, 4.66%)</title><rect x="7.2769%" y="149" width="4.6567%" height="15" fill="rgb(235,124,12)" fg:x="2780" fg:w="1779"/><text x="7.5269%" y="159.50">uct_r..</text></g><g><title>[libucs.so.0.0.0] (8 samples, 0.02%)</title><rect x="12.3891%" y="69" width="0.0209%" height="15" fill="rgb(224,169,11)" fg:x="4733" fg:w="8"/><text x="12.6391%" y="79.50"></text></g><g><title>__pthread_rwlock_rdlock (32 samples, 0.08%)</title><rect x="12.4100%" y="69" width="0.0838%" height="15" fill="rgb(250,166,2)" fg:x="4741" fg:w="32"/><text x="12.6600%" y="79.50"></text></g><g><title>__pthread_rwlock_unlock (54 samples, 0.14%)</title><rect x="12.4938%" y="69" width="0.1414%" height="15" fill="rgb(242,216,29)" fg:x="4773" fg:w="54"/><text x="12.7438%" y="79.50"></text></g><g><title>pthread_spin_lock (16 samples, 0.04%)</title><rect x="12.6351%" y="69" width="0.0419%" height="15" fill="rgb(230,116,27)" fg:x="4827" fg:w="16"/><text x="12.8851%" y="79.50"></text></g><g><title>ucs_pgtable_lookup (46 samples, 0.12%)</title><rect x="12.6796%" y="69" width="0.1204%" height="15" fill="rgb(228,99,48)" fg:x="4844" fg:w="46"/><text x="12.9296%" y="79.50"></text></g><g><title>[libuct_ib.so.0.0.0] (231 samples, 0.60%)</title><rect x="12.2634%" y="101" width="0.6047%" height="15" fill="rgb(253,11,6)" fg:x="4685" fg:w="231"/><text x="12.5134%" y="111.50"></text></g><g><title>ucs_rcache_get (221 samples, 0.58%)</title><rect x="12.2896%" y="85" width="0.5785%" height="15" fill="rgb(247,143,39)" fg:x="4695" fg:w="221"/><text x="12.5396%" y="95.50"></text></g><g><title>ucs_rcache_region_hold (26 samples, 0.07%)</title><rect x="12.8000%" y="69" width="0.0681%" height="15" fill="rgb(236,97,10)" fg:x="4890" fg:w="26"/><text x="13.0500%" y="79.50"></text></g><g><title>ucp_tag_send_nbx (2,666 samples, 6.98%)</title><rect x="5.9236%" y="181" width="6.9785%" height="15" fill="rgb(233,208,19)" fg:x="2263" fg:w="2666"/><text x="6.1736%" y="191.50">ucp_tag_s..</text></g><g><title>ucp_request_send_start (370 samples, 0.97%)</title><rect x="11.9336%" y="165" width="0.9685%" height="15" fill="rgb(216,164,2)" fg:x="4559" fg:w="370"/><text x="12.1836%" y="175.50"></text></g><g><title>ucp_request_memory_reg (317 samples, 0.83%)</title><rect x="12.0724%" y="149" width="0.8298%" height="15" fill="rgb(220,129,5)" fg:x="4612" fg:w="317"/><text x="12.3224%" y="159.50"></text></g><g><title>ucp_mem_rereg_mds (301 samples, 0.79%)</title><rect x="12.1142%" y="133" width="0.7879%" height="15" fill="rgb(242,17,10)" fg:x="4628" fg:w="301"/><text x="12.3642%" y="143.50"></text></g><g><title>uct_md_mem_reg (252 samples, 0.66%)</title><rect x="12.2425%" y="117" width="0.6596%" height="15" fill="rgb(242,107,0)" fg:x="4677" fg:w="252"/><text x="12.4925%" y="127.50"></text></g><g><title>uct_md_mem_reg_v2 (13 samples, 0.03%)</title><rect x="12.8681%" y="101" width="0.0340%" height="15" fill="rgb(251,28,31)" fg:x="4916" fg:w="13"/><text x="13.1181%" y="111.50"></text></g><g><title>[libucp.so.0.0.0] (77 samples, 0.20%)</title><rect x="13.3995%" y="165" width="0.2016%" height="15" fill="rgb(233,223,10)" fg:x="5119" fg:w="77"/><text x="13.6495%" y="175.50"></text></g><g><title>pthread_self@GLIBC_2.17 (12 samples, 0.03%)</title><rect x="17.8049%" y="149" width="0.0314%" height="15" fill="rgb(215,21,27)" fg:x="6802" fg:w="12"/><text x="18.0549%" y="159.50"></text></g><g><title>pthread_spin_lock (324 samples, 0.85%)</title><rect x="17.8363%" y="149" width="0.8481%" height="15" fill="rgb(232,23,21)" fg:x="6814" fg:w="324"/><text x="18.0863%" y="159.50"></text></g><g><title>__aarch64_swp4_acq (16 samples, 0.04%)</title><rect x="18.6425%" y="133" width="0.0419%" height="15" fill="rgb(244,5,23)" fg:x="7122" fg:w="16"/><text x="18.8925%" y="143.50"></text></g><g><title>pthread_spin_unlock (11 samples, 0.03%)</title><rect x="18.6844%" y="149" width="0.0288%" height="15" fill="rgb(226,81,46)" fg:x="7138" fg:w="11"/><text x="18.9344%" y="159.50"></text></g><g><title>pthread_spin_lock (6 samples, 0.02%)</title><rect x="18.9017%" y="37" width="0.0157%" height="15" fill="rgb(247,70,30)" fg:x="7221" fg:w="6"/><text x="19.1517%" y="47.50"></text></g><g><title>[libucp.so.0.0.0] (59 samples, 0.15%)</title><rect x="18.7682%" y="117" width="0.1544%" height="15" fill="rgb(212,68,19)" fg:x="7170" fg:w="59"/><text x="19.0182%" y="127.50"></text></g><g><title>ucp_mem_rereg_mds (55 samples, 0.14%)</title><rect x="18.7786%" y="101" width="0.1440%" height="15" fill="rgb(240,187,13)" fg:x="7174" fg:w="55"/><text x="19.0286%" y="111.50"></text></g><g><title>uct_md_mem_dereg (44 samples, 0.12%)</title><rect x="18.8074%" y="85" width="0.1152%" height="15" fill="rgb(223,113,26)" fg:x="7185" fg:w="44"/><text x="19.0574%" y="95.50"></text></g><g><title>[libuct_ib.so.0.0.0] (42 samples, 0.11%)</title><rect x="18.8127%" y="69" width="0.1099%" height="15" fill="rgb(206,192,2)" fg:x="7187" fg:w="42"/><text x="19.0627%" y="79.50"></text></g><g><title>ucs_rcache_region_put (42 samples, 0.11%)</title><rect x="18.8127%" y="53" width="0.1099%" height="15" fill="rgb(241,108,4)" fg:x="7187" fg:w="42"/><text x="19.0627%" y="63.50"></text></g><g><title>&lt;mpicd::message::ContiguousSendMessage as mpicd::message::Message&gt;::progress (5,219 samples, 13.66%)</title><rect x="5.2666%" y="197" width="13.6612%" height="15" fill="rgb(247,173,49)" fg:x="2012" fg:w="5219"/><text x="5.5166%" y="207.50">&lt;mpicd::message::Cont..</text></g><g><title>ucp_worker_progress (2,302 samples, 6.03%)</title><rect x="12.9021%" y="181" width="6.0257%" height="15" fill="rgb(224,114,35)" fg:x="4929" fg:w="2302"/><text x="13.1521%" y="191.50">ucp_work..</text></g><g><title>[libuct_ib.so.0.0.0] (2,035 samples, 5.33%)</title><rect x="13.6010%" y="165" width="5.3268%" height="15" fill="rgb(245,159,27)" fg:x="5196" fg:w="2035"/><text x="13.8510%" y="175.50">[libuct..</text></g><g><title>uct_rc_ep_send_op_completion_handler (82 samples, 0.21%)</title><rect x="18.7132%" y="149" width="0.2146%" height="15" fill="rgb(245,172,44)" fg:x="7149" fg:w="82"/><text x="18.9632%" y="159.50"></text></g><g><title>ucp_proto_am_zcopy_req_complete (67 samples, 0.18%)</title><rect x="18.7525%" y="133" width="0.1754%" height="15" fill="rgb(236,23,11)" fg:x="7164" fg:w="67"/><text x="19.0025%" y="143.50"></text></g><g><title>rust_ucs_ptr_is_err (34 samples, 0.09%)</title><rect x="23.4798%" y="165" width="0.0890%" height="15" fill="rgb(205,117,38)" fg:x="8970" fg:w="34"/><text x="23.7298%" y="175.50"></text></g><g><title>rust_ucs_ptr_is_ptr (40 samples, 0.10%)</title><rect x="23.5688%" y="165" width="0.1047%" height="15" fill="rgb(237,72,25)" fg:x="9004" fg:w="40"/><text x="23.8188%" y="175.50"></text></g><g><title>mpicd::request::Request::status (457 samples, 1.20%)</title><rect x="22.6553%" y="181" width="1.1962%" height="15" fill="rgb(244,70,9)" fg:x="8655" fg:w="457"/><text x="22.9053%" y="191.50"></text></g><g><title>rust_ucs_ptr_status (68 samples, 0.18%)</title><rect x="23.6735%" y="165" width="0.1780%" height="15" fill="rgb(217,125,39)" fg:x="9044" fg:w="68"/><text x="23.9235%" y="175.50"></text></g><g><title>[libucp.so.0.0.0] (238 samples, 0.62%)</title><rect x="25.3331%" y="165" width="0.6230%" height="15" fill="rgb(235,36,10)" fg:x="9678" fg:w="238"/><text x="25.5831%" y="175.50"></text></g><g><title>pthread_self@GLIBC_2.17 (19 samples, 0.05%)</title><rect x="36.9919%" y="149" width="0.0497%" height="15" fill="rgb(251,123,47)" fg:x="14132" fg:w="19"/><text x="37.2419%" y="159.50"></text></g><g><title>pthread_spin_lock (992 samples, 2.60%)</title><rect x="37.0416%" y="149" width="2.5967%" height="15" fill="rgb(221,13,13)" fg:x="14151" fg:w="992"/><text x="37.2916%" y="159.50">pt..</text></g><g><title>__aarch64_swp4_acq (34 samples, 0.09%)</title><rect x="39.5493%" y="133" width="0.0890%" height="15" fill="rgb(238,131,9)" fg:x="15109" fg:w="34"/><text x="39.7993%" y="143.50"></text></g><g><title>pthread_spin_unlock (33 samples, 0.09%)</title><rect x="39.6382%" y="149" width="0.0864%" height="15" fill="rgb(211,50,8)" fg:x="15143" fg:w="33"/><text x="39.8882%" y="159.50"></text></g><g><title>[libuct_ib.so.0.0.0] (5,264 samples, 13.78%)</title><rect x="25.9561%" y="165" width="13.7790%" height="15" fill="rgb(245,182,24)" fg:x="9916" fg:w="5264"/><text x="26.2061%" y="175.50">[libuct_ib.so.0.0.0]</text></g><g><title>&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress (7,950 samples, 20.81%)</title><rect x="18.9278%" y="197" width="20.8099%" height="15" fill="rgb(242,14,37)" fg:x="7231" fg:w="7950"/><text x="19.1778%" y="207.50">&lt;mpicd::message::PackRecvMessage ..</text></g><g><title>ucp_worker_progress (6,066 samples, 15.88%)</title><rect x="23.8594%" y="181" width="15.8783%" height="15" fill="rgb(246,228,12)" fg:x="9115" fg:w="6066"/><text x="24.1094%" y="191.50">ucp_worker_progress</text></g><g><title>&lt;mpicd::request::Request as core::ops::drop::Drop&gt;::drop (23 samples, 0.06%)</title><rect x="39.7744%" y="181" width="0.0602%" height="15" fill="rgb(213,55,15)" fg:x="15195" fg:w="23"/><text x="40.0244%" y="191.50"></text></g><g><title>ucp_request_free (17 samples, 0.04%)</title><rect x="39.7901%" y="165" width="0.0445%" height="15" fill="rgb(209,9,3)" fg:x="15201" fg:w="17"/><text x="40.0401%" y="175.50"></text></g><g><title>_int_free (104 samples, 0.27%)</title><rect x="39.8346%" y="181" width="0.2722%" height="15" fill="rgb(230,59,30)" fg:x="15218" fg:w="104"/><text x="40.0846%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::message::PackRecvMessage&gt; (6 samples, 0.02%)</title><rect x="40.1120%" y="181" width="0.0157%" height="15" fill="rgb(209,121,21)" fg:x="15324" fg:w="6"/><text x="40.3620%" y="191.50"></text></g><g><title>mpicd::Handle::remove_message (167 samples, 0.44%)</title><rect x="39.7377%" y="197" width="0.4371%" height="15" fill="rgb(220,109,13)" fg:x="15181" fg:w="167"/><text x="39.9877%" y="207.50"></text></g><g><title>free (18 samples, 0.05%)</title><rect x="40.1277%" y="181" width="0.0471%" height="15" fill="rgb(232,18,1)" fg:x="15330" fg:w="18"/><text x="40.3777%" y="191.50"></text></g><g><title>rust_ucs_ptr_is_err (7 samples, 0.02%)</title><rect x="40.4340%" y="181" width="0.0183%" height="15" fill="rgb(215,41,42)" fg:x="15447" fg:w="7"/><text x="40.6840%" y="191.50"></text></g><g><title>rust_ucs_ptr_is_ptr (9 samples, 0.02%)</title><rect x="40.4523%" y="181" width="0.0236%" height="15" fill="rgb(224,123,36)" fg:x="15454" fg:w="9"/><text x="40.7023%" y="191.50"></text></g><g><title>mpicd::request::Request::status (132 samples, 0.35%)</title><rect x="40.1749%" y="197" width="0.3455%" height="15" fill="rgb(240,125,3)" fg:x="15348" fg:w="132"/><text x="40.4249%" y="207.50"></text></g><g><title>rust_ucs_ptr_status (17 samples, 0.04%)</title><rect x="40.4759%" y="181" width="0.0445%" height="15" fill="rgb(205,98,50)" fg:x="15463" fg:w="17"/><text x="40.7259%" y="191.50"></text></g><g><title>[libucp.so.0.0.0] (289 samples, 0.76%)</title><rect x="42.5176%" y="181" width="0.7565%" height="15" fill="rgb(205,185,37)" fg:x="16243" fg:w="289"/><text x="42.7676%" y="191.50"></text></g><g><title>pthread_self@GLIBC_2.17 (65 samples, 0.17%)</title><rect x="58.1368%" y="165" width="0.1701%" height="15" fill="rgb(238,207,15)" fg:x="22210" fg:w="65"/><text x="58.3868%" y="175.50"></text></g><g><title>pthread_spin_lock (1,261 samples, 3.30%)</title><rect x="58.3069%" y="165" width="3.3008%" height="15" fill="rgb(213,199,42)" fg:x="22275" fg:w="1261"/><text x="58.5569%" y="175.50">pth..</text></g><g><title>__aarch64_swp4_acq (44 samples, 0.12%)</title><rect x="61.4926%" y="149" width="0.1152%" height="15" fill="rgb(235,201,11)" fg:x="23492" fg:w="44"/><text x="61.7426%" y="159.50"></text></g><g><title>pthread_spin_unlock (46 samples, 0.12%)</title><rect x="61.6077%" y="165" width="0.1204%" height="15" fill="rgb(207,46,11)" fg:x="23536" fg:w="46"/><text x="61.8577%" y="175.50"></text></g><g><title>ucp_eager_only_handler (6 samples, 0.02%)</title><rect x="61.7281%" y="165" width="0.0157%" height="15" fill="rgb(241,35,35)" fg:x="23582" fg:w="6"/><text x="61.9781%" y="175.50"></text></g><g><title>pthread_spin_lock (5 samples, 0.01%)</title><rect x="61.9925%" y="53" width="0.0131%" height="15" fill="rgb(243,32,47)" fg:x="23683" fg:w="5"/><text x="62.2425%" y="63.50"></text></g><g><title>[libucp.so.0.0.0] (80 samples, 0.21%)</title><rect x="61.7988%" y="133" width="0.2094%" height="15" fill="rgb(247,202,23)" fg:x="23609" fg:w="80"/><text x="62.0488%" y="143.50"></text></g><g><title>ucp_mem_rereg_mds (70 samples, 0.18%)</title><rect x="61.8250%" y="117" width="0.1832%" height="15" fill="rgb(219,102,11)" fg:x="23619" fg:w="70"/><text x="62.0750%" y="127.50"></text></g><g><title>uct_md_mem_dereg (55 samples, 0.14%)</title><rect x="61.8643%" y="101" width="0.1440%" height="15" fill="rgb(243,110,44)" fg:x="23634" fg:w="55"/><text x="62.1143%" y="111.50"></text></g><g><title>[libuct_ib.so.0.0.0] (49 samples, 0.13%)</title><rect x="61.8800%" y="85" width="0.1283%" height="15" fill="rgb(222,74,54)" fg:x="23640" fg:w="49"/><text x="62.1300%" y="95.50"></text></g><g><title>ucs_rcache_region_put (45 samples, 0.12%)</title><rect x="61.8904%" y="69" width="0.1178%" height="15" fill="rgb(216,99,12)" fg:x="23644" fg:w="45"/><text x="62.1404%" y="79.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall (22,802 samples, 59.69%)</title><rect x="2.3244%" y="213" width="59.6864%" height="15" fill="rgb(226,22,26)" fg:x="888" fg:w="22802"/><text x="2.5744%" y="223.50">&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall</text></g><g><title>ucp_worker_progress (8,210 samples, 21.49%)</title><rect x="40.5204%" y="197" width="21.4905%" height="15" fill="rgb(217,163,10)" fg:x="15480" fg:w="8210"/><text x="40.7704%" y="207.50">ucp_worker_progress</text></g><g><title>[libuct_ib.so.0.0.0] (7,158 samples, 18.74%)</title><rect x="43.2741%" y="181" width="18.7367%" height="15" fill="rgb(213,25,53)" fg:x="16532" fg:w="7158"/><text x="43.5241%" y="191.50">[libuct_ib.so.0.0.0]</text></g><g><title>uct_rc_ep_send_op_completion_handler (102 samples, 0.27%)</title><rect x="61.7438%" y="165" width="0.2670%" height="15" fill="rgb(252,105,26)" fg:x="23588" fg:w="102"/><text x="61.9938%" y="175.50"></text></g><g><title>ucp_proto_am_zcopy_req_complete (87 samples, 0.23%)</title><rect x="61.7831%" y="149" width="0.2277%" height="15" fill="rgb(220,39,43)" fg:x="23603" fg:w="87"/><text x="62.0331%" y="159.50"></text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.01%)</title><rect x="97.0107%" y="197" width="0.0105%" height="15" fill="rgb(229,68,48)" fg:x="37061" fg:w="4"/><text x="97.2607%" y="207.50"></text></g><g><title>__GI_memset (628 samples, 1.64%)</title><rect x="97.2280%" y="181" width="1.6438%" height="15" fill="rgb(252,8,32)" fg:x="37144" fg:w="628"/><text x="97.4780%" y="191.50"></text></g><g><title>malloc_consolidate (62 samples, 0.16%)</title><rect x="99.0472%" y="165" width="0.1623%" height="15" fill="rgb(223,20,43)" fg:x="37839" fg:w="62"/><text x="99.2972%" y="175.50"></text></g><g><title>unlink_chunk.isra.2 (30 samples, 0.08%)</title><rect x="99.1310%" y="149" width="0.0785%" height="15" fill="rgb(229,81,49)" fg:x="37871" fg:w="30"/><text x="99.3810%" y="159.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructSimpleArray as mpicd_rust_benchmarks::datatype::ManualPack&gt;::manual_pack (14,215 samples, 37.21%)</title><rect x="62.0108%" y="213" width="37.2091%" height="15" fill="rgb(236,28,36)" fg:x="23690" fg:w="14215"/><text x="62.2608%" y="223.50">&lt;mpicd_rust_benchmarks::datatype::StructSimpleArray as mpicd_..</text></g><g><title>calloc (840 samples, 2.20%)</title><rect x="97.0212%" y="197" width="2.1988%" height="15" fill="rgb(249,185,26)" fg:x="37065" fg:w="840"/><text x="97.2712%" y="207.50">c..</text></g><g><title>_int_malloc (133 samples, 0.35%)</title><rect x="98.8718%" y="181" width="0.3481%" height="15" fill="rgb(249,174,33)" fg:x="37772" fg:w="133"/><text x="99.1218%" y="191.50"></text></g><g><title>unlink_chunk.isra.2 (4 samples, 0.01%)</title><rect x="99.2095%" y="165" width="0.0105%" height="15" fill="rgb(233,201,37)" fg:x="37901" fg:w="4"/><text x="99.4595%" y="175.50"></text></g><g><title>_int_free (92 samples, 0.24%)</title><rect x="99.2200%" y="213" width="0.2408%" height="15" fill="rgb(221,78,26)" fg:x="37905" fg:w="92"/><text x="99.4700%" y="223.50"></text></g><g><title>unlink_chunk.isra.2 (8 samples, 0.02%)</title><rect x="99.4398%" y="197" width="0.0209%" height="15" fill="rgb(250,127,30)" fg:x="37989" fg:w="8"/><text x="99.6898%" y="207.50"></text></g><g><title>_int_free (5 samples, 0.01%)</title><rect x="99.4948%" y="149" width="0.0131%" height="15" fill="rgb(230,49,44)" fg:x="38010" fg:w="5"/><text x="99.7448%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (26 samples, 0.07%)</title><rect x="99.4608%" y="213" width="0.0681%" height="15" fill="rgb(229,67,23)" fg:x="37997" fg:w="26"/><text x="99.7108%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.06%)</title><rect x="99.4660%" y="197" width="0.0628%" height="15" fill="rgb(249,83,47)" fg:x="37999" fg:w="24"/><text x="99.7160%" y="207.50"></text></g><g><title>__libc_realloc (24 samples, 0.06%)</title><rect x="99.4660%" y="181" width="0.0628%" height="15" fill="rgb(215,43,3)" fg:x="37999" fg:w="24"/><text x="99.7160%" y="191.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="99.4922%" y="165" width="0.0366%" height="15" fill="rgb(238,154,13)" fg:x="38009" fg:w="14"/><text x="99.7422%" y="175.50"></text></g><g><title>_int_malloc (8 samples, 0.02%)</title><rect x="99.5079%" y="149" width="0.0209%" height="15" fill="rgb(219,56,2)" fg:x="38015" fg:w="8"/><text x="99.7579%" y="159.50"></text></g><g><title>&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body (37,416 samples, 97.94%)</title><rect x="1.6124%" y="229" width="97.9400%" height="15" fill="rgb(233,0,4)" fg:x="616" fg:w="37416"/><text x="1.8624%" y="239.50">&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body</text></g><g><title>free (9 samples, 0.02%)</title><rect x="99.5288%" y="213" width="0.0236%" height="15" fill="rgb(235,30,7)" fg:x="38023" fg:w="9"/><text x="99.7788%" y="223.50"></text></g><g><title>__libc_start_main (37,464 samples, 98.07%)</title><rect x="1.4946%" y="341" width="98.0656%" height="15" fill="rgb(250,79,13)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="351.50">__libc_start_main</text></g><g><title>main (37,464 samples, 98.07%)</title><rect x="1.4946%" y="325" width="98.0656%" height="15" fill="rgb(211,146,34)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (37,464 samples, 98.07%)</title><rect x="1.4946%" y="309" width="98.0656%" height="15" fill="rgb(228,22,38)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="319.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (37,464 samples, 98.07%)</title><rect x="1.4946%" y="293" width="98.0656%" height="15" fill="rgb(235,168,5)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (37,464 samples, 98.07%)</title><rect x="1.4946%" y="277" width="98.0656%" height="15" fill="rgb(221,155,16)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mpicd_bw::main (37,464 samples, 98.07%)</title><rect x="1.4946%" y="261" width="98.0656%" height="15" fill="rgb(215,215,53)" fg:x="571" fg:w="37464"/><text x="1.7446%" y="271.50">mpicd_bw::main</text></g><g><title>mpicd_rust_benchmarks::bw::bw (37,424 samples, 97.96%)</title><rect x="1.5994%" y="245" width="97.9609%" height="15" fill="rgb(223,4,10)" fg:x="611" fg:w="37424"/><text x="1.8494%" y="255.50">mpicd_rust_benchmarks::bw::bw</text></g><g><title>_start (37,472 samples, 98.09%)</title><rect x="1.4894%" y="373" width="98.0865%" height="15" fill="rgb(234,103,6)" fg:x="569" fg:w="37472"/><text x="1.7394%" y="383.50">_start</text></g><g><title>_start (37,470 samples, 98.08%)</title><rect x="1.4946%" y="357" width="98.0813%" height="15" fill="rgb(227,97,0)" fg:x="571" fg:w="37470"/><text x="1.7446%" y="367.50">_start</text></g><g><title>_dl_start (6 samples, 0.02%)</title><rect x="99.5602%" y="341" width="0.0157%" height="15" fill="rgb(234,150,53)" fg:x="38035" fg:w="6"/><text x="99.8102%" y="351.50"></text></g><g><title>free@plt (4 samples, 0.01%)</title><rect x="99.5864%" y="373" width="0.0105%" height="15" fill="rgb(228,201,54)" fg:x="38045" fg:w="4"/><text x="99.8364%" y="383.50"></text></g><g><title>epoll_pwait (5 samples, 0.01%)</title><rect x="99.6178%" y="293" width="0.0131%" height="15" fill="rgb(222,22,37)" fg:x="38057" fg:w="5"/><text x="99.8678%" y="303.50"></text></g><g><title>job_data (4 samples, 0.01%)</title><rect x="99.6362%" y="277" width="0.0105%" height="15" fill="rgb(237,53,32)" fg:x="38064" fg:w="4"/><text x="99.8862%" y="287.50"></text></g><g><title>client_connect_to_shmem2_from_buffi (4 samples, 0.01%)</title><rect x="99.6362%" y="261" width="0.0105%" height="15" fill="rgb(233,25,53)" fg:x="38064" fg:w="4"/><text x="99.8862%" y="271.50"></text></g><g><title>thread_start (19 samples, 0.05%)</title><rect x="99.5995%" y="373" width="0.0497%" height="15" fill="rgb(210,40,34)" fg:x="38050" fg:w="19"/><text x="99.8495%" y="383.50"></text></g><g><title>start_thread (19 samples, 0.05%)</title><rect x="99.5995%" y="357" width="0.0497%" height="15" fill="rgb(241,220,44)" fg:x="38050" fg:w="19"/><text x="99.8495%" y="367.50"></text></g><g><title>progress_engine (12 samples, 0.03%)</title><rect x="99.6178%" y="341" width="0.0314%" height="15" fill="rgb(235,28,35)" fg:x="38057" fg:w="12"/><text x="99.8678%" y="351.50"></text></g><g><title>event_base_loop (12 samples, 0.03%)</title><rect x="99.6178%" y="325" width="0.0314%" height="15" fill="rgb(210,56,17)" fg:x="38057" fg:w="12"/><text x="99.8678%" y="335.50"></text></g><g><title>[libevent_core-2.1.so.6.0.2] (12 samples, 0.03%)</title><rect x="99.6178%" y="309" width="0.0314%" height="15" fill="rgb(224,130,29)" fg:x="38057" fg:w="12"/><text x="99.8678%" y="319.50"></text></g><g><title>pmix_ptl_base_process_msg (5 samples, 0.01%)</title><rect x="99.6362%" y="293" width="0.0131%" height="15" fill="rgb(235,212,8)" fg:x="38064" fg:w="5"/><text x="99.8862%" y="303.50"></text></g><g><title>ucp_worker_progress@plt (102 samples, 0.27%)</title><rect x="99.6911%" y="373" width="0.2670%" height="15" fill="rgb(223,33,50)" fg:x="38085" fg:w="102"/><text x="99.9411%" y="383.50"></text></g><g><title>ucs_rcache_get (5 samples, 0.01%)</title><rect x="99.9581%" y="373" width="0.0131%" height="15" fill="rgb(219,149,13)" fg:x="38187" fg:w="5"/><text x="100.2081%" y="383.50"></text></g><g><title>ucs_rcache_region_put (4 samples, 0.01%)</title><rect x="99.9712%" y="373" width="0.0105%" height="15" fill="rgb(250,156,29)" fg:x="38192" fg:w="4"/><text x="100.2212%" y="383.50"></text></g><g><title>uct_rc_ep_send_op_completion_handler (5 samples, 0.01%)</title><rect x="99.9843%" y="373" width="0.0131%" height="15" fill="rgb(216,193,19)" fg:x="38197" fg:w="5"/><text x="100.2343%" y="383.50"></text></g><g><title>ucp_proto_am_zcopy_req_complete@plt (5 samples, 0.01%)</title><rect x="99.9843%" y="357" width="0.0131%" height="15" fill="rgb(216,135,14)" fg:x="38197" fg:w="5"/><text x="100.2343%" y="367.50"></text></g><g><title>all (38,203 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="38203"/><text x="0.2500%" y="415.50"></text></g><g><title>mpicd_bw (37,993 samples, 99.45%)</title><rect x="0.5497%" y="389" width="99.4503%" height="15" fill="rgb(233,42,35)" fg:x="210" fg:w="37993"/><text x="0.7997%" y="399.50">mpicd_bw</text></g></svg></svg>