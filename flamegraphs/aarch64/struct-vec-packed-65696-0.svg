<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="213347"><g><title>ucs_event_set_wait (25 samples, 0.01%)</title><rect x="0.0173%" y="293" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="37" fg:w="25"/><text x="0.2673%" y="303.50"></text></g><g><title>[libucs.so.0.0.0] (63 samples, 0.03%)</title><rect x="0.0047%" y="309" width="0.0295%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="63"/><text x="0.2547%" y="319.50"></text></g><g><title>async (82 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0384%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="82"/><text x="0.2500%" y="367.50"></text></g><g><title>thread_start (77 samples, 0.04%)</title><rect x="0.0023%" y="341" width="0.0361%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="77"/><text x="0.2523%" y="351.50"></text></g><g><title>start_thread (77 samples, 0.04%)</title><rect x="0.0023%" y="325" width="0.0361%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="77"/><text x="0.2523%" y="335.50"></text></g><g><title>pthread_self@plt (1,262 samples, 0.59%)</title><rect x="0.0469%" y="325" width="0.5915%" height="15" fill="rgb(232,128,0)" fg:x="100" fg:w="1262"/><text x="0.2969%" y="335.50"></text></g><g><title>pthread_spin_lock@plt (1,165 samples, 0.55%)</title><rect x="0.6384%" y="325" width="0.5461%" height="15" fill="rgb(207,160,47)" fg:x="1362" fg:w="1165"/><text x="0.8884%" y="335.50"></text></g><g><title>pthread_spin_unlock@plt (1,187 samples, 0.56%)</title><rect x="1.1845%" y="325" width="0.5564%" height="15" fill="rgb(228,23,34)" fg:x="2527" fg:w="1187"/><text x="1.4345%" y="335.50"></text></g><g><title>[libuct_ib.so.0.0.0] (3,616 samples, 1.69%)</title><rect x="0.0464%" y="341" width="1.6949%" height="15" fill="rgb(218,30,26)" fg:x="99" fg:w="3616"/><text x="0.2964%" y="351.50"></text></g><g><title>[libuct_ib.so.0.0.0] (30 samples, 0.01%)</title><rect x="1.7540%" y="117" width="0.0141%" height="15" fill="rgb(220,122,19)" fg:x="3742" fg:w="30"/><text x="2.0040%" y="127.50"></text></g><g><title>uct_ib_md_open (31 samples, 0.01%)</title><rect x="1.7540%" y="133" width="0.0145%" height="15" fill="rgb(250,228,42)" fg:x="3742" fg:w="31"/><text x="2.0040%" y="143.50"></text></g><g><title>uct_md_open (32 samples, 0.01%)</title><rect x="1.7540%" y="149" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="3742" fg:w="32"/><text x="2.0040%" y="159.50"></text></g><g><title>[libucp.so.0.0.0] (35 samples, 0.02%)</title><rect x="1.7535%" y="165" width="0.0164%" height="15" fill="rgb(216,20,37)" fg:x="3741" fg:w="35"/><text x="2.0035%" y="175.50"></text></g><g><title>ucp_init_version (36 samples, 0.02%)</title><rect x="1.7535%" y="197" width="0.0169%" height="15" fill="rgb(206,188,39)" fg:x="3741" fg:w="36"/><text x="2.0035%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (36 samples, 0.02%)</title><rect x="1.7535%" y="181" width="0.0169%" height="15" fill="rgb(217,207,13)" fg:x="3741" fg:w="36"/><text x="2.0035%" y="191.50"></text></g><g><title>uct_iface_open (27 samples, 0.01%)</title><rect x="1.7741%" y="149" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="3785" fg:w="27"/><text x="2.0241%" y="159.50"></text></g><g><title>[libucp.so.0.0.0] (38 samples, 0.02%)</title><rect x="1.7704%" y="181" width="0.0178%" height="15" fill="rgb(225,20,46)" fg:x="3777" fg:w="38"/><text x="2.0204%" y="191.50"></text></g><g><title>ucp_worker_iface_open (31 samples, 0.01%)</title><rect x="1.7736%" y="165" width="0.0145%" height="15" fill="rgb(210,31,41)" fg:x="3784" fg:w="31"/><text x="2.0236%" y="175.50"></text></g><g><title>mpicd::init (88 samples, 0.04%)</title><rect x="1.7474%" y="213" width="0.0412%" height="15" fill="rgb(221,200,47)" fg:x="3728" fg:w="88"/><text x="1.9974%" y="223.50"></text></g><g><title>ucp_worker_create (39 samples, 0.02%)</title><rect x="1.7704%" y="197" width="0.0183%" height="15" fill="rgb(226,26,5)" fg:x="3777" fg:w="39"/><text x="2.0204%" y="207.50"></text></g><g><title>__libc_malloc (188 samples, 0.09%)</title><rect x="1.8214%" y="149" width="0.0881%" height="15" fill="rgb(249,33,26)" fg:x="3886" fg:w="188"/><text x="2.0714%" y="159.50"></text></g><g><title>_int_malloc (89 samples, 0.04%)</title><rect x="1.8678%" y="133" width="0.0417%" height="15" fill="rgb(235,183,28)" fg:x="3985" fg:w="89"/><text x="2.1178%" y="143.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::isend (213 samples, 0.10%)</title><rect x="1.8107%" y="181" width="0.0998%" height="15" fill="rgb(221,5,38)" fg:x="3863" fg:w="213"/><text x="2.0607%" y="191.50"></text></g><g><title>mpicd::Handle::add_message (205 samples, 0.10%)</title><rect x="1.8144%" y="165" width="0.0961%" height="15" fill="rgb(247,18,42)" fg:x="3871" fg:w="205"/><text x="2.0644%" y="175.50"></text></g><g><title>__libc_malloc (82 samples, 0.04%)</title><rect x="7.7967%" y="149" width="0.0384%" height="15" fill="rgb(241,131,45)" fg:x="16634" fg:w="82"/><text x="8.0467%" y="159.50"></text></g><g><title>_int_malloc (32 samples, 0.01%)</title><rect x="7.8201%" y="133" width="0.0150%" height="15" fill="rgb(249,31,29)" fg:x="16684" fg:w="32"/><text x="8.0701%" y="143.50"></text></g><g><title>ucp_rndv_rts_pack (57 samples, 0.03%)</title><rect x="7.8731%" y="101" width="0.0267%" height="15" fill="rgb(225,111,53)" fg:x="16797" fg:w="57"/><text x="8.1231%" y="111.50"></text></g><g><title>ucp_rkey_pack_uct (48 samples, 0.02%)</title><rect x="7.8773%" y="85" width="0.0225%" height="15" fill="rgb(238,160,17)" fg:x="16806" fg:w="48"/><text x="8.1273%" y="95.50"></text></g><g><title>[libucp.so.0.0.0] (48 samples, 0.02%)</title><rect x="7.8773%" y="69" width="0.0225%" height="15" fill="rgb(214,148,48)" fg:x="16806" fg:w="48"/><text x="8.1273%" y="79.50"></text></g><g><title>ucp_do_am_single (435 samples, 0.20%)</title><rect x="7.8618%" y="117" width="0.2039%" height="15" fill="rgb(232,36,49)" fg:x="16773" fg:w="435"/><text x="8.1118%" y="127.50"></text></g><g><title>uct_rc_mlx5_ep_am_short (352 samples, 0.16%)</title><rect x="7.9007%" y="101" width="0.1650%" height="15" fill="rgb(209,103,24)" fg:x="16856" fg:w="352"/><text x="8.1507%" y="111.50"></text></g><g><title>ucp_proto_progress_tag_rndv_rts (444 samples, 0.21%)</title><rect x="7.8590%" y="133" width="0.2081%" height="15" fill="rgb(229,88,8)" fg:x="16767" fg:w="444"/><text x="8.1090%" y="143.50"></text></g><g><title>__pthread_rwlock_rdlock (40 samples, 0.02%)</title><rect x="8.1534%" y="37" width="0.0187%" height="15" fill="rgb(213,181,19)" fg:x="17395" fg:w="40"/><text x="8.4034%" y="47.50"></text></g><g><title>__pthread_rwlock_unlock (84 samples, 0.04%)</title><rect x="8.1721%" y="37" width="0.0394%" height="15" fill="rgb(254,191,54)" fg:x="17435" fg:w="84"/><text x="8.4221%" y="47.50"></text></g><g><title>pthread_spin_lock (37 samples, 0.02%)</title><rect x="8.2115%" y="37" width="0.0173%" height="15" fill="rgb(241,83,37)" fg:x="17519" fg:w="37"/><text x="8.4615%" y="47.50"></text></g><g><title>ucs_pgtable_lookup (54 samples, 0.03%)</title><rect x="8.2298%" y="37" width="0.0253%" height="15" fill="rgb(233,36,39)" fg:x="17558" fg:w="54"/><text x="8.4798%" y="47.50"></text></g><g><title>[libuct_ib.so.0.0.0] (333 samples, 0.16%)</title><rect x="8.1182%" y="69" width="0.1561%" height="15" fill="rgb(226,3,54)" fg:x="17320" fg:w="333"/><text x="8.3682%" y="79.50"></text></g><g><title>ucs_rcache_get (320 samples, 0.15%)</title><rect x="8.1243%" y="53" width="0.1500%" height="15" fill="rgb(245,192,40)" fg:x="17333" fg:w="320"/><text x="8.3743%" y="63.50"></text></g><g><title>ucs_rcache_region_hold (41 samples, 0.02%)</title><rect x="8.2551%" y="37" width="0.0192%" height="15" fill="rgb(238,167,29)" fg:x="17612" fg:w="41"/><text x="8.5051%" y="47.50"></text></g><g><title>ucp_rndv_reg_send_buffer (474 samples, 0.22%)</title><rect x="8.0700%" y="133" width="0.2222%" height="15" fill="rgb(232,182,51)" fg:x="17217" fg:w="474"/><text x="8.3200%" y="143.50"></text></g><g><title>ucp_request_memory_reg (450 samples, 0.21%)</title><rect x="8.0812%" y="117" width="0.2109%" height="15" fill="rgb(231,60,39)" fg:x="17241" fg:w="450"/><text x="8.3312%" y="127.50"></text></g><g><title>ucp_mem_rereg_mds (435 samples, 0.20%)</title><rect x="8.0882%" y="101" width="0.2039%" height="15" fill="rgb(208,69,12)" fg:x="17256" fg:w="435"/><text x="8.3382%" y="111.50"></text></g><g><title>uct_md_mem_reg (383 samples, 0.18%)</title><rect x="8.1126%" y="85" width="0.1795%" height="15" fill="rgb(235,93,37)" fg:x="17308" fg:w="383"/><text x="8.3626%" y="95.50"></text></g><g><title>uct_md_mem_reg_v2 (38 samples, 0.02%)</title><rect x="8.2743%" y="69" width="0.0178%" height="15" fill="rgb(213,116,39)" fg:x="17653" fg:w="38"/><text x="8.5243%" y="79.50"></text></g><g><title>ucp_tag_send_nbx (999 samples, 0.47%)</title><rect x="7.8370%" y="149" width="0.4683%" height="15" fill="rgb(222,207,29)" fg:x="16720" fg:w="999"/><text x="8.0870%" y="159.50"></text></g><g><title>ucp_tag_send_start_rndv (28 samples, 0.01%)</title><rect x="8.2921%" y="133" width="0.0131%" height="15" fill="rgb(206,96,30)" fg:x="17691" fg:w="28"/><text x="8.5421%" y="143.50"></text></g><g><title>[libucp.so.0.0.0] (2,634 samples, 1.23%)</title><rect x="11.5399%" y="133" width="1.2346%" height="15" fill="rgb(218,138,4)" fg:x="24620" fg:w="2634"/><text x="11.7899%" y="143.50"></text></g><g><title>pthread_self@GLIBC_2.17 (459 samples, 0.22%)</title><rect x="36.5020%" y="117" width="0.2151%" height="15" fill="rgb(250,191,14)" fg:x="77876" fg:w="459"/><text x="36.7520%" y="127.50"></text></g><g><title>pthread_spin_lock (12,246 samples, 5.74%)</title><rect x="36.7172%" y="117" width="5.7399%" height="15" fill="rgb(239,60,40)" fg:x="78335" fg:w="12246"/><text x="36.9672%" y="127.50">pthread..</text></g><g><title>__aarch64_swp4_acq (510 samples, 0.24%)</title><rect x="42.2181%" y="101" width="0.2390%" height="15" fill="rgb(206,27,48)" fg:x="90071" fg:w="510"/><text x="42.4681%" y="111.50"></text></g><g><title>pthread_spin_unlock (453 samples, 0.21%)</title><rect x="42.4571%" y="117" width="0.2123%" height="15" fill="rgb(225,35,8)" fg:x="90581" fg:w="453"/><text x="42.7071%" y="127.50"></text></g><g><title>[libucp.so.0.0.0] (96 samples, 0.04%)</title><rect x="42.6746%" y="101" width="0.0450%" height="15" fill="rgb(250,213,24)" fg:x="91045" fg:w="96"/><text x="42.9246%" y="111.50"></text></g><g><title>ucp_mem_rereg_mds (94 samples, 0.04%)</title><rect x="42.6755%" y="85" width="0.0441%" height="15" fill="rgb(247,123,22)" fg:x="91047" fg:w="94"/><text x="42.9255%" y="95.50"></text></g><g><title>uct_md_mem_dereg (80 samples, 0.04%)</title><rect x="42.6821%" y="69" width="0.0375%" height="15" fill="rgb(231,138,38)" fg:x="91061" fg:w="80"/><text x="42.9321%" y="79.50"></text></g><g><title>[libuct_ib.so.0.0.0] (77 samples, 0.04%)</title><rect x="42.6835%" y="53" width="0.0361%" height="15" fill="rgb(231,145,46)" fg:x="91064" fg:w="77"/><text x="42.9335%" y="63.50"></text></g><g><title>ucs_rcache_region_put (75 samples, 0.04%)</title><rect x="42.6845%" y="37" width="0.0352%" height="15" fill="rgb(251,118,11)" fg:x="91066" fg:w="75"/><text x="42.9345%" y="47.50"></text></g><g><title>ucp_rndv_ats_handler (108 samples, 0.05%)</title><rect x="42.6695%" y="117" width="0.0506%" height="15" fill="rgb(217,147,25)" fg:x="91034" fg:w="108"/><text x="42.9195%" y="127.50"></text></g><g><title>&lt;mpicd::message::ContiguousSendMessage as mpicd::message::Message&gt;::progress (78,589 samples, 36.84%)</title><rect x="5.8885%" y="165" width="36.8362%" height="15" fill="rgb(247,81,37)" fg:x="12563" fg:w="78589"/><text x="6.1385%" y="175.50">&lt;mpicd::message::ContiguousSendMessage as mpicd::message::Me..</text></g><g><title>ucp_worker_progress (73,433 samples, 34.42%)</title><rect x="8.3052%" y="149" width="34.4195%" height="15" fill="rgb(209,12,38)" fg:x="17719" fg:w="73433"/><text x="8.5552%" y="159.50">ucp_worker_progress</text></g><g><title>[libuct_ib.so.0.0.0] (63,898 samples, 29.95%)</title><rect x="12.7745%" y="133" width="29.9503%" height="15" fill="rgb(227,1,9)" fg:x="27254" fg:w="63898"/><text x="13.0245%" y="143.50">[libuct_ib.so.0.0.0]</text></g><g><title>rust_ucs_ptr_is_err (77 samples, 0.04%)</title><rect x="44.3545%" y="133" width="0.0361%" height="15" fill="rgb(248,47,43)" fg:x="94629" fg:w="77"/><text x="44.6045%" y="143.50"></text></g><g><title>rust_ucs_ptr_is_ptr (78 samples, 0.04%)</title><rect x="44.3906%" y="133" width="0.0366%" height="15" fill="rgb(221,10,30)" fg:x="94706" fg:w="78"/><text x="44.6406%" y="143.50"></text></g><g><title>mpicd::request::Request::status (867 samples, 0.41%)</title><rect x="44.0798%" y="149" width="0.4064%" height="15" fill="rgb(210,229,1)" fg:x="94043" fg:w="867"/><text x="44.3298%" y="159.50"></text></g><g><title>rust_ucs_ptr_status (126 samples, 0.06%)</title><rect x="44.4272%" y="133" width="0.0591%" height="15" fill="rgb(222,148,37)" fg:x="94784" fg:w="126"/><text x="44.6772%" y="143.50"></text></g><g><title>[libucp.so.0.0.0] (419 samples, 0.20%)</title><rect x="45.0984%" y="133" width="0.1964%" height="15" fill="rgb(234,67,33)" fg:x="96216" fg:w="419"/><text x="45.3484%" y="143.50"></text></g><g><title>pthread_self@GLIBC_2.17 (80 samples, 0.04%)</title><rect x="49.1429%" y="117" width="0.0375%" height="15" fill="rgb(247,98,35)" fg:x="104845" fg:w="80"/><text x="49.3929%" y="127.50"></text></g><g><title>pthread_spin_lock (1,956 samples, 0.92%)</title><rect x="49.1804%" y="117" width="0.9168%" height="15" fill="rgb(247,138,52)" fg:x="104925" fg:w="1956"/><text x="49.4304%" y="127.50"></text></g><g><title>__aarch64_swp4_acq (69 samples, 0.03%)</title><rect x="50.0649%" y="101" width="0.0323%" height="15" fill="rgb(213,79,30)" fg:x="106812" fg:w="69"/><text x="50.3149%" y="111.50"></text></g><g><title>pthread_spin_unlock (80 samples, 0.04%)</title><rect x="50.0973%" y="117" width="0.0375%" height="15" fill="rgb(246,177,23)" fg:x="106881" fg:w="80"/><text x="50.3473%" y="127.50"></text></g><g><title>&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress (15,813 samples, 7.41%)</title><rect x="42.7248%" y="165" width="7.4119%" height="15" fill="rgb(230,62,27)" fg:x="91152" fg:w="15813"/><text x="42.9748%" y="175.50">&lt;mpicd::me..</text></g><g><title>ucp_worker_progress (12,049 samples, 5.65%)</title><rect x="44.4890%" y="149" width="5.6476%" height="15" fill="rgb(216,154,8)" fg:x="94916" fg:w="12049"/><text x="44.7390%" y="159.50">ucp_wor..</text></g><g><title>[libuct_ib.so.0.0.0] (10,330 samples, 4.84%)</title><rect x="45.2948%" y="133" width="4.8419%" height="15" fill="rgb(244,35,45)" fg:x="96635" fg:w="10330"/><text x="45.5448%" y="143.50">[libuc..</text></g><g><title>&lt;mpicd::request::Request as core::ops::drop::Drop&gt;::drop (41 samples, 0.02%)</title><rect x="50.1394%" y="149" width="0.0192%" height="15" fill="rgb(251,115,12)" fg:x="106971" fg:w="41"/><text x="50.3894%" y="159.50"></text></g><g><title>ucp_request_free (36 samples, 0.02%)</title><rect x="50.1418%" y="133" width="0.0169%" height="15" fill="rgb(240,54,50)" fg:x="106976" fg:w="36"/><text x="50.3918%" y="143.50"></text></g><g><title>_int_free (84 samples, 0.04%)</title><rect x="50.1605%" y="149" width="0.0394%" height="15" fill="rgb(233,84,52)" fg:x="107016" fg:w="84"/><text x="50.4105%" y="159.50"></text></g><g><title>mpicd::Handle::remove_message (141 samples, 0.07%)</title><rect x="50.1366%" y="165" width="0.0661%" height="15" fill="rgb(207,117,47)" fg:x="106965" fg:w="141"/><text x="50.3866%" y="175.50"></text></g><g><title>rust_ucs_ptr_is_err (520 samples, 0.24%)</title><rect x="51.9093%" y="149" width="0.2437%" height="15" fill="rgb(249,43,39)" fg:x="110747" fg:w="520"/><text x="52.1593%" y="159.50"></text></g><g><title>rust_ucs_ptr_is_ptr (499 samples, 0.23%)</title><rect x="52.1531%" y="149" width="0.2339%" height="15" fill="rgb(209,38,44)" fg:x="111267" fg:w="499"/><text x="52.4031%" y="159.50"></text></g><g><title>mpicd::request::Request::status (5,203 samples, 2.44%)</title><rect x="50.2027%" y="165" width="2.4388%" height="15" fill="rgb(236,212,23)" fg:x="107106" fg:w="5203"/><text x="50.4527%" y="175.50">mp..</text></g><g><title>rust_ucs_ptr_status (543 samples, 0.25%)</title><rect x="52.3870%" y="149" width="0.2545%" height="15" fill="rgb(242,79,21)" fg:x="111766" fg:w="543"/><text x="52.6370%" y="159.50"></text></g><g><title>[libucp.so.0.0.0] (4,507 samples, 2.11%)</title><rect x="56.8750%" y="149" width="2.1125%" height="15" fill="rgb(211,96,35)" fg:x="121341" fg:w="4507"/><text x="57.1250%" y="159.50">[..</text></g><g><title>pthread_self@GLIBC_2.17 (330 samples, 0.15%)</title><rect x="87.0361%" y="133" width="0.1547%" height="15" fill="rgb(253,215,40)" fg:x="185689" fg:w="330"/><text x="87.2861%" y="143.50"></text></g><g><title>pthread_spin_lock (14,065 samples, 6.59%)</title><rect x="87.1908%" y="133" width="6.5925%" height="15" fill="rgb(211,81,21)" fg:x="186019" fg:w="14065"/><text x="87.4408%" y="143.50">pthread_s..</text></g><g><title>__aarch64_swp4_acq (344 samples, 0.16%)</title><rect x="93.6221%" y="117" width="0.1612%" height="15" fill="rgb(208,190,38)" fg:x="199740" fg:w="344"/><text x="93.8721%" y="127.50"></text></g><g><title>pthread_spin_unlock (536 samples, 0.25%)</title><rect x="93.7834%" y="133" width="0.2512%" height="15" fill="rgb(235,213,38)" fg:x="200084" fg:w="536"/><text x="94.0334%" y="143.50"></text></g><g><title>[libucp.so.0.0.0] (115 samples, 0.05%)</title><rect x="94.0412%" y="117" width="0.0539%" height="15" fill="rgb(237,122,38)" fg:x="200634" fg:w="115"/><text x="94.2912%" y="127.50"></text></g><g><title>ucp_mem_rereg_mds (114 samples, 0.05%)</title><rect x="94.0416%" y="101" width="0.0534%" height="15" fill="rgb(244,218,35)" fg:x="200635" fg:w="114"/><text x="94.2916%" y="111.50"></text></g><g><title>uct_md_mem_dereg (101 samples, 0.05%)</title><rect x="94.0477%" y="85" width="0.0473%" height="15" fill="rgb(240,68,47)" fg:x="200648" fg:w="101"/><text x="94.2977%" y="95.50"></text></g><g><title>[libuct_ib.so.0.0.0] (93 samples, 0.04%)</title><rect x="94.0515%" y="69" width="0.0436%" height="15" fill="rgb(210,16,53)" fg:x="200656" fg:w="93"/><text x="94.3015%" y="79.50"></text></g><g><title>ucs_rcache_region_put (88 samples, 0.04%)</title><rect x="94.0538%" y="53" width="0.0412%" height="15" fill="rgb(235,124,12)" fg:x="200661" fg:w="88"/><text x="94.3038%" y="63.50"></text></g><g><title>ucp_rndv_ats_handler (128 samples, 0.06%)</title><rect x="94.0355%" y="133" width="0.0600%" height="15" fill="rgb(224,169,11)" fg:x="200622" fg:w="128"/><text x="94.2855%" y="143.50"></text></g><g><title>[libuct_ib.so.0.0.0] (74,907 samples, 35.11%)</title><rect x="58.9879%" y="149" width="35.1104%" height="15" fill="rgb(250,166,2)" fg:x="125849" fg:w="74907"/><text x="59.2379%" y="159.50">[libuct_ib.so.0.0.0]</text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall (196,681 samples, 92.19%)</title><rect x="1.9105%" y="181" width="92.1883%" height="15" fill="rgb(242,216,29)" fg:x="4076" fg:w="196681"/><text x="2.1605%" y="191.50">&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall</text></g><g><title>ucp_worker_progress (88,448 samples, 41.46%)</title><rect x="52.6415%" y="165" width="41.4573%" height="15" fill="rgb(230,116,27)" fg:x="112309" fg:w="88448"/><text x="52.8915%" y="175.50">ucp_worker_progress</text></g><g><title>__memcpy_thunderx2 (9,018 samples, 4.23%)</title><rect x="94.1635%" y="165" width="4.2269%" height="15" fill="rgb(228,99,48)" fg:x="200895" fg:w="9018"/><text x="94.4135%" y="175.50">__mem..</text></g><g><title>__GI_memset (1,367 samples, 0.64%)</title><rect x="98.4335%" y="149" width="0.6407%" height="15" fill="rgb(253,11,6)" fg:x="210005" fg:w="1367"/><text x="98.6835%" y="159.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecArray as mpicd_rust_benchmarks::datatype::ManualPack&gt;::manual_pack (10,720 samples, 5.02%)</title><rect x="94.0988%" y="181" width="5.0247%" height="15" fill="rgb(247,143,39)" fg:x="200757" fg:w="10720"/><text x="94.3488%" y="191.50">&lt;mpicd..</text></g><g><title>calloc (1,558 samples, 0.73%)</title><rect x="98.3932%" y="165" width="0.7303%" height="15" fill="rgb(236,97,10)" fg:x="209919" fg:w="1558"/><text x="98.6432%" y="175.50"></text></g><g><title>_int_malloc (102 samples, 0.05%)</title><rect x="99.0757%" y="149" width="0.0478%" height="15" fill="rgb(233,208,19)" fg:x="211375" fg:w="102"/><text x="99.3257%" y="159.50"></text></g><g><title>malloc_consolidate (55 samples, 0.03%)</title><rect x="99.0977%" y="133" width="0.0258%" height="15" fill="rgb(216,164,2)" fg:x="211422" fg:w="55"/><text x="99.3477%" y="143.50"></text></g><g><title>_int_free (55 samples, 0.03%)</title><rect x="99.1244%" y="181" width="0.0258%" height="15" fill="rgb(220,129,5)" fg:x="211479" fg:w="55"/><text x="99.3744%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.01%)</title><rect x="99.1502%" y="181" width="0.0145%" height="15" fill="rgb(242,17,10)" fg:x="211534" fg:w="31"/><text x="99.4002%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.01%)</title><rect x="99.1507%" y="165" width="0.0141%" height="15" fill="rgb(242,107,0)" fg:x="211535" fg:w="30"/><text x="99.4007%" y="175.50"></text></g><g><title>__libc_realloc (29 samples, 0.01%)</title><rect x="99.1511%" y="149" width="0.0136%" height="15" fill="rgb(251,28,31)" fg:x="211536" fg:w="29"/><text x="99.4011%" y="159.50"></text></g><g><title>_int_realloc (25 samples, 0.01%)</title><rect x="99.1530%" y="133" width="0.0117%" height="15" fill="rgb(233,223,10)" fg:x="211540" fg:w="25"/><text x="99.4030%" y="143.50"></text></g><g><title>&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body (207,752 samples, 97.38%)</title><rect x="1.7910%" y="197" width="97.3775%" height="15" fill="rgb(215,21,27)" fg:x="3821" fg:w="207752"/><text x="2.0410%" y="207.50">&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body</text></g><g><title>__libc_start_main (207,857 samples, 97.43%)</title><rect x="1.7469%" y="309" width="97.4267%" height="15" fill="rgb(232,23,21)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="319.50">__libc_start_main</text></g><g><title>main (207,857 samples, 97.43%)</title><rect x="1.7469%" y="293" width="97.4267%" height="15" fill="rgb(244,5,23)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="303.50">main</text></g><g><title>std::rt::lang_start_internal (207,857 samples, 97.43%)</title><rect x="1.7469%" y="277" width="97.4267%" height="15" fill="rgb(226,81,46)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="287.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (207,857 samples, 97.43%)</title><rect x="1.7469%" y="261" width="97.4267%" height="15" fill="rgb(247,70,30)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="271.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (207,857 samples, 97.43%)</title><rect x="1.7469%" y="245" width="97.4267%" height="15" fill="rgb(212,68,19)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="255.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mpicd_bw::main (207,857 samples, 97.43%)</title><rect x="1.7469%" y="229" width="97.4267%" height="15" fill="rgb(240,187,13)" fg:x="3727" fg:w="207857"/><text x="1.9969%" y="239.50">mpicd_bw::main</text></g><g><title>mpicd_rust_benchmarks::bw::bw (207,768 samples, 97.39%)</title><rect x="1.7886%" y="213" width="97.3850%" height="15" fill="rgb(223,113,26)" fg:x="3816" fg:w="207768"/><text x="2.0386%" y="223.50">mpicd_rust_benchmarks::bw::bw</text></g><g><title>_start (207,871 samples, 97.43%)</title><rect x="1.7460%" y="341" width="97.4333%" height="15" fill="rgb(206,192,2)" fg:x="3725" fg:w="207871"/><text x="1.9960%" y="351.50">_start</text></g><g><title>_start (207,869 samples, 97.43%)</title><rect x="1.7469%" y="325" width="97.4324%" height="15" fill="rgb(241,108,4)" fg:x="3727" fg:w="207869"/><text x="1.9969%" y="335.50">_start</text></g><g><title>ucp_worker_progress@plt (1,681 samples, 0.79%)</title><rect x="99.2046%" y="341" width="0.7879%" height="15" fill="rgb(247,173,49)" fg:x="211650" fg:w="1681"/><text x="99.4546%" y="351.50"></text></g><g><title>all (213,347 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="213347"/><text x="0.2500%" y="383.50"></text></g><g><title>mpicd_bw (213,265 samples, 99.96%)</title><rect x="0.0384%" y="357" width="99.9616%" height="15" fill="rgb(245,159,27)" fg:x="82" fg:w="213265"/><text x="0.2884%" y="367.50">mpicd_bw</text></g></svg></svg>