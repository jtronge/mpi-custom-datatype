<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="19016"><g><title>ucs_async_dispatch_timerq (8 samples, 0.04%)</title><rect x="0.0526%" y="373" width="0.0421%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="8"/><text x="0.3026%" y="383.50"></text></g><g><title>ucs_async_dispatch_handlers (6 samples, 0.03%)</title><rect x="0.0631%" y="357" width="0.0316%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="6"/><text x="0.3131%" y="367.50"></text></g><g><title>[libucs.so.0.0.0] (6 samples, 0.03%)</title><rect x="0.0631%" y="341" width="0.0316%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="6"/><text x="0.3131%" y="351.50"></text></g><g><title>ucs_mpmc_queue_push (5 samples, 0.03%)</title><rect x="0.0684%" y="325" width="0.0263%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="5"/><text x="0.3184%" y="335.50"></text></g><g><title>ucs_malloc (4 samples, 0.02%)</title><rect x="0.0736%" y="309" width="0.0210%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="4"/><text x="0.3236%" y="319.50"></text></g><g><title>__libc_malloc (4 samples, 0.02%)</title><rect x="0.0736%" y="293" width="0.0210%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="4"/><text x="0.3236%" y="303.50"></text></g><g><title>tcache_init.part.5 (4 samples, 0.02%)</title><rect x="0.0736%" y="277" width="0.0210%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="4"/><text x="0.3236%" y="287.50"></text></g><g><title>arena_get2 (4 samples, 0.02%)</title><rect x="0.0736%" y="261" width="0.0210%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="4"/><text x="0.3236%" y="271.50"></text></g><g><title>new_heap (4 samples, 0.02%)</title><rect x="0.0736%" y="245" width="0.0210%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="4"/><text x="0.3236%" y="255.50"></text></g><g><title>ucm_munmap (3 samples, 0.02%)</title><rect x="0.0789%" y="229" width="0.0158%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="3"/><text x="0.3289%" y="239.50"></text></g><g><title>ucm_event_dispatch (3 samples, 0.02%)</title><rect x="0.0789%" y="213" width="0.0158%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="3"/><text x="0.3289%" y="223.50"></text></g><g><title>[libucs.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.0841%" y="197" width="0.0105%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="2"/><text x="0.3341%" y="207.50"></text></g><g><title>[libucs.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.0841%" y="181" width="0.0105%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="2"/><text x="0.3341%" y="191.50"></text></g><g><title>ucs_async_dispatch_handlers (9 samples, 0.05%)</title><rect x="0.2103%" y="341" width="0.0473%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="9"/><text x="0.4603%" y="351.50"></text></g><g><title>[libucs.so.0.0.0] (9 samples, 0.05%)</title><rect x="0.2103%" y="325" width="0.0473%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="9"/><text x="0.4603%" y="335.50"></text></g><g><title>[libucs.so.0.0.0] (9 samples, 0.05%)</title><rect x="0.2103%" y="309" width="0.0473%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="9"/><text x="0.4603%" y="319.50"></text></g><g><title>[libuct_ib.so.0.0.0] (9 samples, 0.05%)</title><rect x="0.2103%" y="293" width="0.0473%" height="15" fill="rgb(225,20,46)" fg:x="40" fg:w="9"/><text x="0.4603%" y="303.50"></text></g><g><title>[libuct_ib.so.0.0.0] (9 samples, 0.05%)</title><rect x="0.2103%" y="277" width="0.0473%" height="15" fill="rgb(210,31,41)" fg:x="40" fg:w="9"/><text x="0.4603%" y="287.50"></text></g><g><title>[libuct_ib.so.0.0.0] (9 samples, 0.05%)</title><rect x="0.2103%" y="261" width="0.0473%" height="15" fill="rgb(221,200,47)" fg:x="40" fg:w="9"/><text x="0.4603%" y="271.50"></text></g><g><title>ucs_mpool_get_grow (9 samples, 0.05%)</title><rect x="0.2103%" y="245" width="0.0473%" height="15" fill="rgb(226,26,5)" fg:x="40" fg:w="9"/><text x="0.4603%" y="255.50"></text></g><g><title>ucs_mpool_grow (9 samples, 0.05%)</title><rect x="0.2103%" y="229" width="0.0473%" height="15" fill="rgb(249,33,26)" fg:x="40" fg:w="9"/><text x="0.4603%" y="239.50"></text></g><g><title>[libuct.so.0.0.0] (5 samples, 0.03%)</title><rect x="0.2314%" y="213" width="0.0263%" height="15" fill="rgb(235,183,28)" fg:x="44" fg:w="5"/><text x="0.4814%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3155%" y="309" width="0.0158%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="3"/><text x="0.5655%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3155%" y="293" width="0.0158%" height="15" fill="rgb(247,18,42)" fg:x="60" fg:w="3"/><text x="0.5655%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3155%" y="277" width="0.0158%" height="15" fill="rgb(241,131,45)" fg:x="60" fg:w="3"/><text x="0.5655%" y="287.50"></text></g><g><title>[libucs.so.0.0.0] (40 samples, 0.21%)</title><rect x="0.1578%" y="357" width="0.2103%" height="15" fill="rgb(249,31,29)" fg:x="30" fg:w="40"/><text x="0.4078%" y="367.50"></text></g><g><title>ucs_async_pipe_drain (21 samples, 0.11%)</title><rect x="0.2577%" y="341" width="0.1104%" height="15" fill="rgb(225,111,53)" fg:x="49" fg:w="21"/><text x="0.5077%" y="351.50"></text></g><g><title>__read (17 samples, 0.09%)</title><rect x="0.2787%" y="325" width="0.0894%" height="15" fill="rgb(238,160,17)" fg:x="53" fg:w="17"/><text x="0.5287%" y="335.50"></text></g><g><title>__pthread_enable_asynccancel (6 samples, 0.03%)</title><rect x="0.3366%" y="309" width="0.0316%" height="15" fill="rgb(214,148,48)" fg:x="64" fg:w="6"/><text x="0.5866%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3839%" y="341" width="0.0158%" height="15" fill="rgb(232,36,49)" fg:x="73" fg:w="3"/><text x="0.6339%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3839%" y="325" width="0.0158%" height="15" fill="rgb(209,103,24)" fg:x="73" fg:w="3"/><text x="0.6339%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3839%" y="309" width="0.0158%" height="15" fill="rgb(229,88,8)" fg:x="73" fg:w="3"/><text x="0.6339%" y="319.50"></text></g><g><title>[libucs.so.0.0.0] (76 samples, 0.40%)</title><rect x="0.0210%" y="389" width="0.3997%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="76"/><text x="0.2710%" y="399.50"></text></g><g><title>ucs_event_set_wait (62 samples, 0.33%)</title><rect x="0.0947%" y="373" width="0.3260%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="62"/><text x="0.3447%" y="383.50"></text></g><g><title>epoll_pwait (10 samples, 0.05%)</title><rect x="0.3681%" y="357" width="0.0526%" height="15" fill="rgb(241,83,37)" fg:x="70" fg:w="10"/><text x="0.6181%" y="367.50"></text></g><g><title>__libc_disable_asynccancel (4 samples, 0.02%)</title><rect x="0.3997%" y="341" width="0.0210%" height="15" fill="rgb(233,36,39)" fg:x="76" fg:w="4"/><text x="0.6497%" y="351.50"></text></g><g><title>__aarch64_cas4_acq (2 samples, 0.01%)</title><rect x="0.4102%" y="325" width="0.0105%" height="15" fill="rgb(226,3,54)" fg:x="78" fg:w="2"/><text x="0.6602%" y="335.50"></text></g><g><title>__ctype_init (4 samples, 0.02%)</title><rect x="0.4260%" y="389" width="0.0210%" height="15" fill="rgb(245,192,40)" fg:x="81" fg:w="4"/><text x="0.6760%" y="399.50"></text></g><g><title>thread_start (84 samples, 0.44%)</title><rect x="0.0105%" y="421" width="0.4417%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="84"/><text x="0.2605%" y="431.50"></text></g><g><title>start_thread (84 samples, 0.44%)</title><rect x="0.0105%" y="405" width="0.4417%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="84"/><text x="0.2605%" y="415.50"></text></g><g><title>async (87 samples, 0.46%)</title><rect x="0.0000%" y="437" width="0.4575%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="87"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecState as mpicd::datatype::UnpackMethod&gt;::unpack (52 samples, 0.27%)</title><rect x="0.4575%" y="421" width="0.2735%" height="15" fill="rgb(208,69,12)" fg:x="87" fg:w="52"/><text x="0.7075%" y="431.50"></text></g><g><title>memcpy@plt (3 samples, 0.02%)</title><rect x="0.7362%" y="389" width="0.0158%" height="15" fill="rgb(235,93,37)" fg:x="140" fg:w="3"/><text x="0.9862%" y="399.50"></text></g><g><title>[libucp.so.0.0.0] (5 samples, 0.03%)</title><rect x="0.7310%" y="421" width="0.0263%" height="15" fill="rgb(213,116,39)" fg:x="139" fg:w="5"/><text x="0.9810%" y="431.50"></text></g><g><title>uct_rc_mlx5_ep_am_short (4 samples, 0.02%)</title><rect x="0.7362%" y="405" width="0.0210%" height="15" fill="rgb(222,207,29)" fg:x="140" fg:w="4"/><text x="0.9862%" y="415.50"></text></g><g><title>pthread_self@plt (24 samples, 0.13%)</title><rect x="0.7625%" y="405" width="0.1262%" height="15" fill="rgb(206,96,30)" fg:x="145" fg:w="24"/><text x="1.0125%" y="415.50"></text></g><g><title>pthread_spin_lock@plt (21 samples, 0.11%)</title><rect x="0.8887%" y="405" width="0.1104%" height="15" fill="rgb(218,138,4)" fg:x="169" fg:w="21"/><text x="1.1387%" y="415.50"></text></g><g><title>pthread_spin_unlock@plt (26 samples, 0.14%)</title><rect x="0.9992%" y="405" width="0.1367%" height="15" fill="rgb(250,191,14)" fg:x="190" fg:w="26"/><text x="1.2492%" y="415.50"></text></g><g><title>ucp_tag_rndv_process_rts@plt (4 samples, 0.02%)</title><rect x="1.1359%" y="405" width="0.0210%" height="15" fill="rgb(239,60,40)" fg:x="216" fg:w="4"/><text x="1.3859%" y="415.50"></text></g><g><title>[libuct_ib.so.0.0.0] (94 samples, 0.49%)</title><rect x="0.7625%" y="421" width="0.4943%" height="15" fill="rgb(206,27,48)" fg:x="145" fg:w="94"/><text x="1.0125%" y="431.50"></text></g><g><title>uct_rc_mlx5_iface_srq_post_recv@plt (19 samples, 0.10%)</title><rect x="1.1569%" y="405" width="0.0999%" height="15" fill="rgb(225,35,8)" fg:x="220" fg:w="19"/><text x="1.4069%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.14%)</title><rect x="1.2568%" y="421" width="0.1367%" height="15" fill="rgb(250,213,24)" fg:x="239" fg:w="26"/><text x="1.5068%" y="431.50"></text></g><g><title>ucp_dt_iov_scatter (24 samples, 0.13%)</title><rect x="1.2674%" y="405" width="0.1262%" height="15" fill="rgb(247,123,22)" fg:x="241" fg:w="24"/><text x="1.5174%" y="415.50"></text></g><g><title>memcpy@plt (24 samples, 0.13%)</title><rect x="1.2674%" y="389" width="0.1262%" height="15" fill="rgb(231,138,38)" fg:x="241" fg:w="24"/><text x="1.5174%" y="399.50"></text></g><g><title>ucp_wireup_select_lanes (4 samples, 0.02%)</title><rect x="1.4304%" y="213" width="0.0210%" height="15" fill="rgb(231,145,46)" fg:x="272" fg:w="4"/><text x="1.6804%" y="223.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.02%)</title><rect x="1.4304%" y="197" width="0.0210%" height="15" fill="rgb(251,118,11)" fg:x="272" fg:w="4"/><text x="1.6804%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.02%)</title><rect x="1.4304%" y="181" width="0.0210%" height="15" fill="rgb(217,147,25)" fg:x="272" fg:w="4"/><text x="1.6804%" y="191.50"></text></g><g><title>[libucp.so.0.0.0] (2 samples, 0.01%)</title><rect x="1.4409%" y="165" width="0.0105%" height="15" fill="rgb(247,81,37)" fg:x="274" fg:w="2"/><text x="1.6909%" y="175.50"></text></g><g><title>ucp_worker_iface_progress_ep (2 samples, 0.01%)</title><rect x="1.4514%" y="213" width="0.0105%" height="15" fill="rgb(209,12,38)" fg:x="276" fg:w="2"/><text x="1.7014%" y="223.50"></text></g><g><title>[libuct_ib.so.0.0.0] (2 samples, 0.01%)</title><rect x="1.4514%" y="197" width="0.0105%" height="15" fill="rgb(227,1,9)" fg:x="276" fg:w="2"/><text x="1.7014%" y="207.50"></text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (2 samples, 0.01%)</title><rect x="1.4514%" y="181" width="0.0105%" height="15" fill="rgb(248,47,43)" fg:x="276" fg:w="2"/><text x="1.7014%" y="191.50"></text></g><g><title>ucp_ep_create_to_worker_addr (8 samples, 0.04%)</title><rect x="1.4251%" y="245" width="0.0421%" height="15" fill="rgb(221,10,30)" fg:x="271" fg:w="8"/><text x="1.6751%" y="255.50"></text></g><g><title>ucp_wireup_init_lanes (7 samples, 0.04%)</title><rect x="1.4304%" y="229" width="0.0368%" height="15" fill="rgb(210,229,1)" fg:x="272" fg:w="7"/><text x="1.6804%" y="239.50"></text></g><g><title>mpicd::create_endpoint (11 samples, 0.06%)</title><rect x="1.4146%" y="277" width="0.0578%" height="15" fill="rgb(222,148,37)" fg:x="269" fg:w="11"/><text x="1.6646%" y="287.50"></text></g><g><title>ucp_ep_create (11 samples, 0.06%)</title><rect x="1.4146%" y="261" width="0.0578%" height="15" fill="rgb(234,67,33)" fg:x="269" fg:w="11"/><text x="1.6646%" y="271.50"></text></g><g><title>mpicd::pmi::PMI::init (4 samples, 0.02%)</title><rect x="1.4724%" y="277" width="0.0210%" height="15" fill="rgb(247,98,35)" fg:x="280" fg:w="4"/><text x="1.7224%" y="287.50"></text></g><g><title>PMIx_Init (4 samples, 0.02%)</title><rect x="1.4724%" y="261" width="0.0210%" height="15" fill="rgb(247,138,52)" fg:x="280" fg:w="4"/><text x="1.7224%" y="271.50"></text></g><g><title>pmix_rte_init (3 samples, 0.02%)</title><rect x="1.4777%" y="245" width="0.0158%" height="15" fill="rgb(213,79,30)" fg:x="281" fg:w="3"/><text x="1.7277%" y="255.50"></text></g><g><title>ucs_vfs_obj_add_dir (3 samples, 0.02%)</title><rect x="1.4987%" y="117" width="0.0158%" height="15" fill="rgb(246,177,23)" fg:x="285" fg:w="3"/><text x="1.7487%" y="127.50"></text></g><g><title>[libucs.so.0.0.0] (3 samples, 0.02%)</title><rect x="1.4987%" y="101" width="0.0158%" height="15" fill="rgb(230,62,27)" fg:x="285" fg:w="3"/><text x="1.7487%" y="111.50"></text></g><g><title>[libucs.so.0.0.0] (10 samples, 0.05%)</title><rect x="1.5145%" y="85" width="0.0526%" height="15" fill="rgb(216,154,8)" fg:x="288" fg:w="10"/><text x="1.7645%" y="95.50"></text></g><g><title>ucs_malloc (2 samples, 0.01%)</title><rect x="1.5566%" y="69" width="0.0105%" height="15" fill="rgb(244,35,45)" fg:x="296" fg:w="2"/><text x="1.8066%" y="79.50"></text></g><g><title>uct_ib_md_open_common (20 samples, 0.11%)</title><rect x="1.4935%" y="181" width="0.1052%" height="15" fill="rgb(251,115,12)" fg:x="284" fg:w="20"/><text x="1.7435%" y="191.50"></text></g><g><title>ucs_rcache_create (19 samples, 0.10%)</title><rect x="1.4987%" y="165" width="0.0999%" height="15" fill="rgb(240,54,50)" fg:x="285" fg:w="19"/><text x="1.7487%" y="175.50"></text></g><g><title>[libucs.so.0.0.0] (19 samples, 0.10%)</title><rect x="1.4987%" y="149" width="0.0999%" height="15" fill="rgb(233,84,52)" fg:x="285" fg:w="19"/><text x="1.7487%" y="159.50"></text></g><g><title>ucs_rcache_vfs_init (19 samples, 0.10%)</title><rect x="1.4987%" y="133" width="0.0999%" height="15" fill="rgb(207,117,47)" fg:x="285" fg:w="19"/><text x="1.7487%" y="143.50"></text></g><g><title>ucs_vfs_obj_add_ro_file (16 samples, 0.08%)</title><rect x="1.5145%" y="117" width="0.0841%" height="15" fill="rgb(249,43,39)" fg:x="288" fg:w="16"/><text x="1.7645%" y="127.50"></text></g><g><title>[libucs.so.0.0.0] (16 samples, 0.08%)</title><rect x="1.5145%" y="101" width="0.0841%" height="15" fill="rgb(209,38,44)" fg:x="288" fg:w="16"/><text x="1.7645%" y="111.50"></text></g><g><title>ucs_snprintf_safe (6 samples, 0.03%)</title><rect x="1.5671%" y="85" width="0.0316%" height="15" fill="rgb(236,212,23)" fg:x="298" fg:w="6"/><text x="1.8171%" y="95.50"></text></g><g><title>ucs_vsnprintf_safe (6 samples, 0.03%)</title><rect x="1.5671%" y="69" width="0.0316%" height="15" fill="rgb(242,79,21)" fg:x="298" fg:w="6"/><text x="1.8171%" y="79.50"></text></g><g><title>__vsnprintf_chk (6 samples, 0.03%)</title><rect x="1.5671%" y="53" width="0.0316%" height="15" fill="rgb(211,96,35)" fg:x="298" fg:w="6"/><text x="1.8171%" y="63.50"></text></g><g><title>_IO_vfprintf (5 samples, 0.03%)</title><rect x="1.5724%" y="37" width="0.0263%" height="15" fill="rgb(253,215,40)" fg:x="299" fg:w="5"/><text x="1.8224%" y="47.50"></text></g><g><title>_IO_fgets (2 samples, 0.01%)</title><rect x="1.6039%" y="133" width="0.0105%" height="15" fill="rgb(211,81,21)" fg:x="305" fg:w="2"/><text x="1.8539%" y="143.50"></text></g><g><title>uct_md_open (24 samples, 0.13%)</title><rect x="1.4935%" y="229" width="0.1262%" height="15" fill="rgb(208,190,38)" fg:x="284" fg:w="24"/><text x="1.7435%" y="239.50"></text></g><g><title>uct_ib_md_open (24 samples, 0.13%)</title><rect x="1.4935%" y="213" width="0.1262%" height="15" fill="rgb(235,213,38)" fg:x="284" fg:w="24"/><text x="1.7435%" y="223.50"></text></g><g><title>[libuct_ib.so.0.0.0] (24 samples, 0.13%)</title><rect x="1.4935%" y="197" width="0.1262%" height="15" fill="rgb(237,122,38)" fg:x="284" fg:w="24"/><text x="1.7435%" y="207.50"></text></g><g><title>verbs_open_device (4 samples, 0.02%)</title><rect x="1.5987%" y="181" width="0.0210%" height="15" fill="rgb(244,218,35)" fg:x="304" fg:w="4"/><text x="1.8487%" y="191.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (3 samples, 0.02%)</title><rect x="1.6039%" y="165" width="0.0158%" height="15" fill="rgb(240,68,47)" fg:x="305" fg:w="3"/><text x="1.8539%" y="175.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (3 samples, 0.02%)</title><rect x="1.6039%" y="149" width="0.0158%" height="15" fill="rgb(210,16,53)" fg:x="305" fg:w="3"/><text x="1.8539%" y="159.50"></text></g><g><title>[libucp.so.0.0.0] (25 samples, 0.13%)</title><rect x="1.4935%" y="245" width="0.1315%" height="15" fill="rgb(235,124,12)" fg:x="284" fg:w="25"/><text x="1.7435%" y="255.50"></text></g><g><title>[libucp.so.0.0.0] (27 samples, 0.14%)</title><rect x="1.4935%" y="261" width="0.1420%" height="15" fill="rgb(224,169,11)" fg:x="284" fg:w="27"/><text x="1.7435%" y="271.50"></text></g><g><title>uct_query_components (2 samples, 0.01%)</title><rect x="1.6249%" y="245" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="309" fg:w="2"/><text x="1.8749%" y="255.50"></text></g><g><title>ucs_load_modules (2 samples, 0.01%)</title><rect x="1.6249%" y="229" width="0.0105%" height="15" fill="rgb(242,216,29)" fg:x="309" fg:w="2"/><text x="1.8749%" y="239.50"></text></g><g><title>[libucs.so.0.0.0] (2 samples, 0.01%)</title><rect x="1.6249%" y="213" width="0.0105%" height="15" fill="rgb(230,116,27)" fg:x="309" fg:w="2"/><text x="1.8749%" y="223.50"></text></g><g><title>dlopen@@GLIBC_2.17 (2 samples, 0.01%)</title><rect x="1.6249%" y="197" width="0.0105%" height="15" fill="rgb(228,99,48)" fg:x="309" fg:w="2"/><text x="1.8749%" y="207.50"></text></g><g><title>_dlerror_run (2 samples, 0.01%)</title><rect x="1.6249%" y="181" width="0.0105%" height="15" fill="rgb(253,11,6)" fg:x="309" fg:w="2"/><text x="1.8749%" y="191.50"></text></g><g><title>_dl_catch_error (2 samples, 0.01%)</title><rect x="1.6249%" y="165" width="0.0105%" height="15" fill="rgb(247,143,39)" fg:x="309" fg:w="2"/><text x="1.8749%" y="175.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.01%)</title><rect x="1.6249%" y="149" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="309" fg:w="2"/><text x="1.8749%" y="159.50"></text></g><g><title>dlopen_doit (2 samples, 0.01%)</title><rect x="1.6249%" y="133" width="0.0105%" height="15" fill="rgb(233,208,19)" fg:x="309" fg:w="2"/><text x="1.8749%" y="143.50"></text></g><g><title>_dl_open (2 samples, 0.01%)</title><rect x="1.6249%" y="117" width="0.0105%" height="15" fill="rgb(216,164,2)" fg:x="309" fg:w="2"/><text x="1.8749%" y="127.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.01%)</title><rect x="1.6249%" y="101" width="0.0105%" height="15" fill="rgb(220,129,5)" fg:x="309" fg:w="2"/><text x="1.8749%" y="111.50"></text></g><g><title>dl_open_worker (2 samples, 0.01%)</title><rect x="1.6249%" y="85" width="0.0105%" height="15" fill="rgb(242,17,10)" fg:x="309" fg:w="2"/><text x="1.8749%" y="95.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.01%)</title><rect x="1.6249%" y="69" width="0.0105%" height="15" fill="rgb(242,107,0)" fg:x="309" fg:w="2"/><text x="1.8749%" y="79.50"></text></g><g><title>dl_open_worker_begin (2 samples, 0.01%)</title><rect x="1.6249%" y="53" width="0.0105%" height="15" fill="rgb(251,28,31)" fg:x="309" fg:w="2"/><text x="1.8749%" y="63.50"></text></g><g><title>ucp_init_version (28 samples, 0.15%)</title><rect x="1.4935%" y="277" width="0.1472%" height="15" fill="rgb(233,223,10)" fg:x="284" fg:w="28"/><text x="1.7435%" y="287.50"></text></g><g><title>[libuct.so.0.0.0] (3 samples, 0.02%)</title><rect x="1.6460%" y="197" width="0.0158%" height="15" fill="rgb(215,21,27)" fg:x="313" fg:w="3"/><text x="1.8960%" y="207.50"></text></g><g><title>ucp_worker_iface_init (7 samples, 0.04%)</title><rect x="1.6407%" y="245" width="0.0368%" height="15" fill="rgb(232,23,21)" fg:x="312" fg:w="7"/><text x="1.8907%" y="255.50"></text></g><g><title>[libucp.so.0.0.0] (7 samples, 0.04%)</title><rect x="1.6407%" y="229" width="0.0368%" height="15" fill="rgb(244,5,23)" fg:x="312" fg:w="7"/><text x="1.8907%" y="239.50"></text></g><g><title>uct_iface_set_am_handler (6 samples, 0.03%)</title><rect x="1.6460%" y="213" width="0.0316%" height="15" fill="rgb(226,81,46)" fg:x="313" fg:w="6"/><text x="1.8960%" y="223.50"></text></g><g><title>[libuct_ib.so.0.0.0] (3 samples, 0.02%)</title><rect x="1.6618%" y="197" width="0.0158%" height="15" fill="rgb(247,70,30)" fg:x="316" fg:w="3"/><text x="1.9118%" y="207.50"></text></g><g><title>uct_rc_iface_query (3 samples, 0.02%)</title><rect x="1.6618%" y="181" width="0.0158%" height="15" fill="rgb(212,68,19)" fg:x="316" fg:w="3"/><text x="1.9118%" y="191.50"></text></g><g><title>uct_ib_iface_query (3 samples, 0.02%)</title><rect x="1.6618%" y="165" width="0.0158%" height="15" fill="rgb(240,187,13)" fg:x="316" fg:w="3"/><text x="1.9118%" y="175.50"></text></g><g><title>[libuct_ib.so.0.0.0] (3 samples, 0.02%)</title><rect x="1.6618%" y="149" width="0.0158%" height="15" fill="rgb(223,113,26)" fg:x="316" fg:w="3"/><text x="1.9118%" y="159.50"></text></g><g><title>[libuct_ib.so.0.0.0] (2 samples, 0.01%)</title><rect x="1.6775%" y="229" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="319" fg:w="2"/><text x="1.9275%" y="239.50"></text></g><g><title>uct_ud_iface_query (2 samples, 0.01%)</title><rect x="1.6775%" y="213" width="0.0105%" height="15" fill="rgb(241,108,4)" fg:x="319" fg:w="2"/><text x="1.9275%" y="223.50"></text></g><g><title>uct_ib_iface_query (2 samples, 0.01%)</title><rect x="1.6775%" y="197" width="0.0105%" height="15" fill="rgb(247,173,49)" fg:x="319" fg:w="2"/><text x="1.9275%" y="207.50"></text></g><g><title>ucs_calloc (2 samples, 0.01%)</title><rect x="1.6881%" y="229" width="0.0105%" height="15" fill="rgb(224,114,35)" fg:x="321" fg:w="2"/><text x="1.9381%" y="239.50"></text></g><g><title>calloc (2 samples, 0.01%)</title><rect x="1.6881%" y="213" width="0.0105%" height="15" fill="rgb(245,159,27)" fg:x="321" fg:w="2"/><text x="1.9381%" y="223.50"></text></g><g><title>uct_rc_iface_t_init (3 samples, 0.02%)</title><rect x="1.6986%" y="181" width="0.0158%" height="15" fill="rgb(245,172,44)" fg:x="323" fg:w="3"/><text x="1.9486%" y="191.50"></text></g><g><title>uct_ib_iface_t_init (3 samples, 0.02%)</title><rect x="1.6986%" y="165" width="0.0158%" height="15" fill="rgb(236,23,11)" fg:x="323" fg:w="3"/><text x="1.9486%" y="175.50"></text></g><g><title>uct_ib_verbs_create_cq (2 samples, 0.01%)</title><rect x="1.7038%" y="149" width="0.0105%" height="15" fill="rgb(205,117,38)" fg:x="324" fg:w="2"/><text x="1.9538%" y="159.50"></text></g><g><title>[libibverbs.so.1.14.43.0] (2 samples, 0.01%)</title><rect x="1.7038%" y="133" width="0.0105%" height="15" fill="rgb(237,72,25)" fg:x="324" fg:w="2"/><text x="1.9538%" y="143.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (2 samples, 0.01%)</title><rect x="1.7038%" y="117" width="0.0105%" height="15" fill="rgb(244,70,9)" fg:x="324" fg:w="2"/><text x="1.9538%" y="127.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (2 samples, 0.01%)</title><rect x="1.7038%" y="101" width="0.0105%" height="15" fill="rgb(217,125,39)" fg:x="324" fg:w="2"/><text x="1.9538%" y="111.50"></text></g><g><title>uct_rc_mlx5_iface_common_t_init (3 samples, 0.02%)</title><rect x="1.7143%" y="181" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="326" fg:w="3"/><text x="1.9643%" y="191.50"></text></g><g><title>uct_rc_iface_t_init (3 samples, 0.02%)</title><rect x="1.7143%" y="165" width="0.0158%" height="15" fill="rgb(251,123,47)" fg:x="326" fg:w="3"/><text x="1.9643%" y="175.50"></text></g><g><title>uct_ib_iface_t_init (2 samples, 0.01%)</title><rect x="1.7196%" y="149" width="0.0105%" height="15" fill="rgb(221,13,13)" fg:x="327" fg:w="2"/><text x="1.9696%" y="159.50"></text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (3 samples, 0.02%)</title><rect x="1.7301%" y="181" width="0.0158%" height="15" fill="rgb(238,131,9)" fg:x="329" fg:w="3"/><text x="1.9801%" y="191.50"></text></g><g><title>uct_ib_device_query_gid_info (5 samples, 0.03%)</title><rect x="1.7459%" y="165" width="0.0263%" height="15" fill="rgb(211,50,8)" fg:x="332" fg:w="5"/><text x="1.9959%" y="175.50"></text></g><g><title>ucs_read_file (4 samples, 0.02%)</title><rect x="1.7512%" y="149" width="0.0210%" height="15" fill="rgb(245,182,24)" fg:x="333" fg:w="4"/><text x="2.0012%" y="159.50"></text></g><g><title>[libucs.so.0.0.0] (4 samples, 0.02%)</title><rect x="1.7512%" y="133" width="0.0210%" height="15" fill="rgb(242,14,37)" fg:x="333" fg:w="4"/><text x="2.0012%" y="143.50"></text></g><g><title>ucs_vsnprintf_safe (3 samples, 0.02%)</title><rect x="1.7564%" y="117" width="0.0158%" height="15" fill="rgb(246,228,12)" fg:x="334" fg:w="3"/><text x="2.0064%" y="127.50"></text></g><g><title>__vsnprintf_chk (3 samples, 0.02%)</title><rect x="1.7564%" y="101" width="0.0158%" height="15" fill="rgb(213,55,15)" fg:x="334" fg:w="3"/><text x="2.0064%" y="111.50"></text></g><g><title>_IO_vfprintf (3 samples, 0.02%)</title><rect x="1.7564%" y="85" width="0.0158%" height="15" fill="rgb(209,9,3)" fg:x="334" fg:w="3"/><text x="2.0064%" y="95.50"></text></g><g><title>[libuct_ib.so.0.0.0] (16 samples, 0.08%)</title><rect x="1.6986%" y="197" width="0.0841%" height="15" fill="rgb(230,59,30)" fg:x="323" fg:w="16"/><text x="1.9486%" y="207.50"></text></g><g><title>uct_ud_iface_t_init (7 samples, 0.04%)</title><rect x="1.7459%" y="181" width="0.0368%" height="15" fill="rgb(209,121,21)" fg:x="332" fg:w="7"/><text x="1.9959%" y="191.50"></text></g><g><title>uct_ib_iface_t_init (2 samples, 0.01%)</title><rect x="1.7722%" y="165" width="0.0105%" height="15" fill="rgb(220,109,13)" fg:x="337" fg:w="2"/><text x="2.0222%" y="175.50"></text></g><g><title>[libuct_ib.so.0.0.0] (18 samples, 0.09%)</title><rect x="1.6986%" y="213" width="0.0947%" height="15" fill="rgb(232,18,1)" fg:x="323" fg:w="18"/><text x="1.9486%" y="223.50"></text></g><g><title>uct_rc_mlx5_iface_t_init (2 samples, 0.01%)</title><rect x="1.7827%" y="197" width="0.0105%" height="15" fill="rgb(215,41,42)" fg:x="339" fg:w="2"/><text x="2.0327%" y="207.50"></text></g><g><title>uct_rc_mlx5_iface_common_t_init (2 samples, 0.01%)</title><rect x="1.7827%" y="181" width="0.0105%" height="15" fill="rgb(224,123,36)" fg:x="339" fg:w="2"/><text x="2.0327%" y="191.50"></text></g><g><title>uct_rc_iface_t_init (2 samples, 0.01%)</title><rect x="1.7827%" y="165" width="0.0105%" height="15" fill="rgb(240,125,3)" fg:x="339" fg:w="2"/><text x="2.0327%" y="175.50"></text></g><g><title>uct_ib_iface_t_init (2 samples, 0.01%)</title><rect x="1.7827%" y="149" width="0.0105%" height="15" fill="rgb(205,98,50)" fg:x="339" fg:w="2"/><text x="2.0327%" y="159.50"></text></g><g><title>uct_ib_mlx5_create_cq (2 samples, 0.01%)</title><rect x="1.7827%" y="133" width="0.0105%" height="15" fill="rgb(205,185,37)" fg:x="339" fg:w="2"/><text x="2.0327%" y="143.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (2 samples, 0.01%)</title><rect x="1.7827%" y="117" width="0.0105%" height="15" fill="rgb(238,207,15)" fg:x="339" fg:w="2"/><text x="2.0327%" y="127.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (2 samples, 0.01%)</title><rect x="1.7827%" y="101" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="339" fg:w="2"/><text x="2.0327%" y="111.50"></text></g><g><title>[libmlx5.so.1.24.43.0] (2 samples, 0.01%)</title><rect x="1.7827%" y="85" width="0.0105%" height="15" fill="rgb(235,201,11)" fg:x="339" fg:w="2"/><text x="2.0327%" y="95.50"></text></g><g><title>uct_iface_open (20 samples, 0.11%)</title><rect x="1.6986%" y="229" width="0.1052%" height="15" fill="rgb(207,46,11)" fg:x="323" fg:w="20"/><text x="1.9486%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (38 samples, 0.20%)</title><rect x="1.6407%" y="261" width="0.1998%" height="15" fill="rgb(241,35,35)" fg:x="312" fg:w="38"/><text x="1.8907%" y="271.50"></text></g><g><title>ucp_worker_iface_open (31 samples, 0.16%)</title><rect x="1.6775%" y="245" width="0.1630%" height="15" fill="rgb(243,32,47)" fg:x="319" fg:w="31"/><text x="1.9275%" y="255.50"></text></g><g><title>uct_md_iface_config_read (7 samples, 0.04%)</title><rect x="1.8037%" y="229" width="0.0368%" height="15" fill="rgb(247,202,23)" fg:x="343" fg:w="7"/><text x="2.0537%" y="239.50"></text></g><g><title>uct_config_read (6 samples, 0.03%)</title><rect x="1.8090%" y="213" width="0.0316%" height="15" fill="rgb(219,102,11)" fg:x="344" fg:w="6"/><text x="2.0590%" y="223.50"></text></g><g><title>ucs_config_parser_fill_opts (5 samples, 0.03%)</title><rect x="1.8143%" y="197" width="0.0263%" height="15" fill="rgb(243,110,44)" fg:x="345" fg:w="5"/><text x="2.0643%" y="207.50"></text></g><g><title>ucs_config_parser_set_default_values (4 samples, 0.02%)</title><rect x="1.8195%" y="181" width="0.0210%" height="15" fill="rgb(222,74,54)" fg:x="346" fg:w="4"/><text x="2.0695%" y="191.50"></text></g><g><title>ucs_config_parser_set_default_values (4 samples, 0.02%)</title><rect x="1.8195%" y="165" width="0.0210%" height="15" fill="rgb(216,99,12)" fg:x="346" fg:w="4"/><text x="2.0695%" y="175.50"></text></g><g><title>ucs_config_parser_set_default_values (3 samples, 0.02%)</title><rect x="1.8248%" y="149" width="0.0158%" height="15" fill="rgb(226,22,26)" fg:x="347" fg:w="3"/><text x="2.0748%" y="159.50"></text></g><g><title>ucs_config_parser_set_default_values (2 samples, 0.01%)</title><rect x="1.8300%" y="133" width="0.0105%" height="15" fill="rgb(217,163,10)" fg:x="348" fg:w="2"/><text x="2.0800%" y="143.50"></text></g><g><title>mpicd::init (83 samples, 0.44%)</title><rect x="1.4146%" y="293" width="0.4365%" height="15" fill="rgb(213,25,53)" fg:x="269" fg:w="83"/><text x="1.6646%" y="303.50"></text></g><g><title>ucp_worker_create (40 samples, 0.21%)</title><rect x="1.6407%" y="277" width="0.2103%" height="15" fill="rgb(252,105,26)" fg:x="312" fg:w="40"/><text x="1.8907%" y="287.50"></text></g><g><title>&lt;mpicd::System as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="1.8511%" y="245" width="0.0158%" height="15" fill="rgb(220,39,43)" fg:x="352" fg:w="3"/><text x="2.1011%" y="255.50"></text></g><g><title>ucp_worker_destroy (3 samples, 0.02%)</title><rect x="1.8511%" y="229" width="0.0158%" height="15" fill="rgb(229,68,48)" fg:x="352" fg:w="3"/><text x="2.1011%" y="239.50"></text></g><g><title>uct_iface_set_am_handler (2 samples, 0.01%)</title><rect x="1.8563%" y="213" width="0.0105%" height="15" fill="rgb(252,8,32)" fg:x="353" fg:w="2"/><text x="2.1063%" y="223.50"></text></g><g><title>&lt;mpicd::pmi::PMI as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="1.8668%" y="245" width="0.0158%" height="15" fill="rgb(223,20,43)" fg:x="355" fg:w="3"/><text x="2.1168%" y="255.50"></text></g><g><title>PMIx_Finalize (3 samples, 0.02%)</title><rect x="1.8668%" y="229" width="0.0158%" height="15" fill="rgb(229,81,49)" fg:x="355" fg:w="3"/><text x="2.1168%" y="239.50"></text></g><g><title>pmix_rte_finalize (3 samples, 0.02%)</title><rect x="1.8668%" y="213" width="0.0158%" height="15" fill="rgb(236,28,36)" fg:x="355" fg:w="3"/><text x="2.1168%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="1.8511%" y="277" width="0.0368%" height="15" fill="rgb(249,185,26)" fg:x="352" fg:w="7"/><text x="2.1011%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::System&gt; (7 samples, 0.04%)</title><rect x="1.8511%" y="261" width="0.0368%" height="15" fill="rgb(249,174,33)" fg:x="352" fg:w="7"/><text x="2.1011%" y="271.50"></text></g><g><title>__libc_malloc (74 samples, 0.39%)</title><rect x="2.0509%" y="229" width="0.3891%" height="15" fill="rgb(233,201,37)" fg:x="390" fg:w="74"/><text x="2.3009%" y="239.50"></text></g><g><title>_int_malloc (52 samples, 0.27%)</title><rect x="2.1666%" y="213" width="0.2735%" height="15" fill="rgb(221,78,26)" fg:x="412" fg:w="52"/><text x="2.4166%" y="223.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecArray as mpicd::datatype::MessageBuffer&gt;::unpack (85 samples, 0.45%)</title><rect x="1.9983%" y="245" width="0.4470%" height="15" fill="rgb(250,127,30)" fg:x="380" fg:w="85"/><text x="2.2483%" y="255.50"></text></g><g><title>mpicd::Handle::add_message (57 samples, 0.30%)</title><rect x="2.4453%" y="245" width="0.2997%" height="15" fill="rgb(230,49,44)" fg:x="465" fg:w="57"/><text x="2.6953%" y="255.50"></text></g><g><title>__libc_malloc (39 samples, 0.21%)</title><rect x="2.5400%" y="229" width="0.2051%" height="15" fill="rgb(229,67,23)" fg:x="483" fg:w="39"/><text x="2.7900%" y="239.50"></text></g><g><title>_int_malloc (28 samples, 0.15%)</title><rect x="2.5978%" y="213" width="0.1472%" height="15" fill="rgb(249,83,47)" fg:x="494" fg:w="28"/><text x="2.8478%" y="223.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecState as mpicd::datatype::PackedSize&gt;::packed_size (5 samples, 0.03%)</title><rect x="2.7819%" y="229" width="0.0263%" height="15" fill="rgb(215,43,3)" fg:x="529" fg:w="5"/><text x="3.0319%" y="239.50"></text></g><g><title>__GI_memset (7 samples, 0.04%)</title><rect x="3.1342%" y="213" width="0.0368%" height="15" fill="rgb(238,154,13)" fg:x="596" fg:w="7"/><text x="3.3842%" y="223.50"></text></g><g><title>__aarch64_cas4_acq (4 samples, 0.02%)</title><rect x="3.1710%" y="213" width="0.0210%" height="15" fill="rgb(219,56,2)" fg:x="603" fg:w="4"/><text x="3.4210%" y="223.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::irecv (274 samples, 1.44%)</title><rect x="1.9562%" y="261" width="1.4409%" height="15" fill="rgb(233,0,4)" fg:x="372" fg:w="274"/><text x="2.2062%" y="271.50"></text></g><g><title>mpicd::message::PackRecvMessage::new (124 samples, 0.65%)</title><rect x="2.7451%" y="245" width="0.6521%" height="15" fill="rgb(235,30,7)" fg:x="522" fg:w="124"/><text x="2.9951%" y="255.50"></text></g><g><title>calloc (112 samples, 0.59%)</title><rect x="2.8082%" y="229" width="0.5890%" height="15" fill="rgb(250,79,13)" fg:x="534" fg:w="112"/><text x="3.0582%" y="239.50"></text></g><g><title>_int_malloc (39 samples, 0.21%)</title><rect x="3.1920%" y="213" width="0.2051%" height="15" fill="rgb(211,146,34)" fg:x="607" fg:w="39"/><text x="3.4420%" y="223.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::isend (5 samples, 0.03%)</title><rect x="3.3971%" y="261" width="0.0263%" height="15" fill="rgb(228,22,38)" fg:x="646" fg:w="5"/><text x="3.6471%" y="271.50"></text></g><g><title>mpicd::Handle::add_message (5 samples, 0.03%)</title><rect x="3.3971%" y="245" width="0.0263%" height="15" fill="rgb(235,168,5)" fg:x="646" fg:w="5"/><text x="3.6471%" y="255.50"></text></g><g><title>__libc_malloc (5 samples, 0.03%)</title><rect x="3.3971%" y="229" width="0.0263%" height="15" fill="rgb(221,155,16)" fg:x="646" fg:w="5"/><text x="3.6471%" y="239.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (35 samples, 0.18%)</title><rect x="5.1273%" y="245" width="0.1841%" height="15" fill="rgb(215,215,53)" fg:x="975" fg:w="35"/><text x="5.3773%" y="255.50"></text></g><g><title>__libc_malloc (34 samples, 0.18%)</title><rect x="5.1325%" y="229" width="0.1788%" height="15" fill="rgb(223,4,10)" fg:x="976" fg:w="34"/><text x="5.3825%" y="239.50"></text></g><g><title>_int_malloc (32 samples, 0.17%)</title><rect x="5.1430%" y="213" width="0.1683%" height="15" fill="rgb(234,103,6)" fg:x="978" fg:w="32"/><text x="5.3930%" y="223.50"></text></g><g><title>malloc_consolidate (19 samples, 0.10%)</title><rect x="5.2114%" y="197" width="0.0999%" height="15" fill="rgb(227,97,0)" fg:x="991" fg:w="19"/><text x="5.4614%" y="207.50"></text></g><g><title>__libc_malloc (12 samples, 0.06%)</title><rect x="8.7663%" y="213" width="0.0631%" height="15" fill="rgb(234,150,53)" fg:x="1667" fg:w="12"/><text x="9.0163%" y="223.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecState as mpicd::datatype::UnpackMethod&gt;::memory_regions (24 samples, 0.13%)</title><rect x="8.7085%" y="229" width="0.1262%" height="15" fill="rgb(228,201,54)" fg:x="1656" fg:w="24"/><text x="8.9585%" y="239.50"></text></g><g><title>&lt;mpicd_rust_benchmarks::datatype::StructVecState as mpicd::datatype::UnpackMethod&gt;::unpack (73 samples, 0.38%)</title><rect x="8.8347%" y="229" width="0.3839%" height="15" fill="rgb(222,22,37)" fg:x="1680" fg:w="73"/><text x="9.0847%" y="239.50"></text></g><g><title>__libc_malloc (54 samples, 0.28%)</title><rect x="9.2186%" y="229" width="0.2840%" height="15" fill="rgb(237,53,32)" fg:x="1753" fg:w="54"/><text x="9.4686%" y="239.50"></text></g><g><title>_int_malloc (21 samples, 0.11%)</title><rect x="9.3921%" y="213" width="0.1104%" height="15" fill="rgb(233,25,53)" fg:x="1786" fg:w="21"/><text x="9.6421%" y="223.50"></text></g><g><title>unlink_chunk.isra.2 (3 samples, 0.02%)</title><rect x="9.4867%" y="197" width="0.0158%" height="15" fill="rgb(210,40,34)" fg:x="1804" fg:w="3"/><text x="9.7367%" y="207.50"></text></g><g><title>_int_free (51 samples, 0.27%)</title><rect x="9.5025%" y="229" width="0.2682%" height="15" fill="rgb(241,220,44)" fg:x="1807" fg:w="51"/><text x="9.7525%" y="239.50"></text></g><g><title>__libc_malloc (9 samples, 0.05%)</title><rect x="9.8601%" y="197" width="0.0473%" height="15" fill="rgb(235,28,35)" fg:x="1875" fg:w="9"/><text x="10.1101%" y="207.50"></text></g><g><title>__aarch64_swp4_rel (2 samples, 0.01%)</title><rect x="10.5385%" y="181" width="0.0105%" height="15" fill="rgb(210,56,17)" fg:x="2004" fg:w="2"/><text x="10.7885%" y="191.50"></text></g><g><title>__memcpy_generic (16 samples, 0.08%)</title><rect x="10.6594%" y="165" width="0.0841%" height="15" fill="rgb(224,130,29)" fg:x="2027" fg:w="16"/><text x="10.9094%" y="175.50"></text></g><g><title>_int_free (45 samples, 0.24%)</title><rect x="10.7436%" y="165" width="0.2366%" height="15" fill="rgb(235,212,8)" fg:x="2043" fg:w="45"/><text x="10.9936%" y="175.50"></text></g><g><title>__libc_realloc (346 samples, 1.82%)</title><rect x="9.9074%" y="197" width="1.8195%" height="15" fill="rgb(223,33,50)" fg:x="1884" fg:w="346"/><text x="10.1574%" y="207.50">_..</text></g><g><title>_int_realloc (224 samples, 1.18%)</title><rect x="10.5490%" y="181" width="1.1780%" height="15" fill="rgb(219,149,13)" fg:x="2006" fg:w="224"/><text x="10.7990%" y="191.50"></text></g><g><title>_int_malloc (142 samples, 0.75%)</title><rect x="10.9802%" y="165" width="0.7467%" height="15" fill="rgb(250,156,29)" fg:x="2088" fg:w="142"/><text x="11.2302%" y="175.50"></text></g><g><title>unlink_chunk.isra.2 (20 samples, 0.11%)</title><rect x="11.6218%" y="149" width="0.1052%" height="15" fill="rgb(216,193,19)" fg:x="2210" fg:w="20"/><text x="11.8718%" y="159.50"></text></g><g><title>__rdl_realloc (11 samples, 0.06%)</title><rect x="11.7270%" y="197" width="0.0578%" height="15" fill="rgb(216,135,14)" fg:x="2230" fg:w="11"/><text x="11.9770%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (384 samples, 2.02%)</title><rect x="9.7707%" y="229" width="2.0194%" height="15" fill="rgb(241,47,5)" fg:x="1858" fg:w="384"/><text x="10.0207%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (377 samples, 1.98%)</title><rect x="9.8075%" y="213" width="1.9825%" height="15" fill="rgb(233,42,35)" fg:x="1865" fg:w="377"/><text x="10.0575%" y="223.50">a..</text></g><g><title>rust_ucs_ptr_is_err (5 samples, 0.03%)</title><rect x="12.3002%" y="213" width="0.0263%" height="15" fill="rgb(231,13,6)" fg:x="2339" fg:w="5"/><text x="12.5502%" y="223.50"></text></g><g><title>rust_ucs_ptr_is_ptr (5 samples, 0.03%)</title><rect x="12.3265%" y="213" width="0.0263%" height="15" fill="rgb(207,181,40)" fg:x="2344" fg:w="5"/><text x="12.5765%" y="223.50"></text></g><g><title>mpicd::request::Request::status (110 samples, 0.58%)</title><rect x="11.7953%" y="229" width="0.5785%" height="15" fill="rgb(254,173,49)" fg:x="2243" fg:w="110"/><text x="12.0453%" y="239.50"></text></g><g><title>rust_ucs_ptr_status (4 samples, 0.02%)</title><rect x="12.3528%" y="213" width="0.0210%" height="15" fill="rgb(221,1,38)" fg:x="2349" fg:w="4"/><text x="12.6028%" y="223.50"></text></g><g><title>ucp_tag_recv_nbx (48 samples, 0.25%)</title><rect x="12.3738%" y="229" width="0.2524%" height="15" fill="rgb(206,124,46)" fg:x="2353" fg:w="48"/><text x="12.6238%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (50 samples, 0.26%)</title><rect x="13.2678%" y="213" width="0.2629%" height="15" fill="rgb(249,21,11)" fg:x="2523" fg:w="50"/><text x="13.5178%" y="223.50"></text></g><g><title>pthread_self@GLIBC_2.17 (7 samples, 0.04%)</title><rect x="22.6073%" y="197" width="0.0368%" height="15" fill="rgb(222,201,40)" fg:x="4299" fg:w="7"/><text x="22.8573%" y="207.50"></text></g><g><title>pthread_spin_lock (277 samples, 1.46%)</title><rect x="22.6441%" y="197" width="1.4567%" height="15" fill="rgb(235,61,29)" fg:x="4306" fg:w="277"/><text x="22.8941%" y="207.50"></text></g><g><title>__aarch64_swp4_acq (14 samples, 0.07%)</title><rect x="24.0271%" y="181" width="0.0736%" height="15" fill="rgb(219,207,3)" fg:x="4569" fg:w="14"/><text x="24.2771%" y="191.50"></text></g><g><title>pthread_spin_unlock (10 samples, 0.05%)</title><rect x="24.1008%" y="197" width="0.0526%" height="15" fill="rgb(222,56,46)" fg:x="4583" fg:w="10"/><text x="24.3508%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.02%)</title><rect x="25.8361%" y="165" width="0.0210%" height="15" fill="rgb(239,76,54)" fg:x="4913" fg:w="4"/><text x="26.0861%" y="175.50"></text></g><g><title>ucp_rndv_data_handler (5,303 samples, 27.89%)</title><rect x="24.1533%" y="197" width="27.8870%" height="15" fill="rgb(231,124,27)" fg:x="4593" fg:w="5303"/><text x="24.4033%" y="207.50">ucp_rndv_data_handler</text></g><g><title>ucp_dt_iov_scatter (5,088 samples, 26.76%)</title><rect x="25.2840%" y="181" width="26.7564%" height="15" fill="rgb(249,195,6)" fg:x="4808" fg:w="5088"/><text x="25.5340%" y="191.50">ucp_dt_iov_scatter</text></g><g><title>__memcpy_thunderx2 (4,979 samples, 26.18%)</title><rect x="25.8572%" y="165" width="26.1832%" height="15" fill="rgb(237,174,47)" fg:x="4917" fg:w="4979"/><text x="26.1072%" y="175.50">__memcpy_thunderx2</text></g><g><title>[libucp.so.0.0.0] (15 samples, 0.08%)</title><rect x="52.3927%" y="117" width="0.0789%" height="15" fill="rgb(206,201,31)" fg:x="9963" fg:w="15"/><text x="52.6427%" y="127.50"></text></g><g><title>__memcpy_thunderx2 (5 samples, 0.03%)</title><rect x="53.3761%" y="101" width="0.0263%" height="15" fill="rgb(231,57,52)" fg:x="10150" fg:w="5"/><text x="53.6261%" y="111.50"></text></g><g><title>ucp_do_am_single (209 samples, 1.10%)</title><rect x="52.3401%" y="133" width="1.0991%" height="15" fill="rgb(248,177,22)" fg:x="9953" fg:w="209"/><text x="52.5901%" y="143.50"></text></g><g><title>uct_rc_mlx5_ep_am_short (184 samples, 0.97%)</title><rect x="52.4716%" y="117" width="0.9676%" height="15" fill="rgb(215,211,37)" fg:x="9978" fg:w="184"/><text x="52.7216%" y="127.50"></text></g><g><title>pthread_spin_lock (7 samples, 0.04%)</title><rect x="53.4024%" y="101" width="0.0368%" height="15" fill="rgb(241,128,51)" fg:x="10155" fg:w="7"/><text x="53.6524%" y="111.50"></text></g><g><title>ucp_proto_progress_rndv_rtr (215 samples, 1.13%)</title><rect x="52.3244%" y="149" width="1.1306%" height="15" fill="rgb(227,165,31)" fg:x="9950" fg:w="215"/><text x="52.5744%" y="159.50"></text></g><g><title>ucp_rkey_packed_size (3 samples, 0.02%)</title><rect x="53.4392%" y="133" width="0.0158%" height="15" fill="rgb(228,167,24)" fg:x="10162" fg:w="3"/><text x="53.6892%" y="143.50"></text></g><g><title>[libucp.so.0.0.0] (234 samples, 1.23%)</title><rect x="52.2297%" y="165" width="1.2305%" height="15" fill="rgb(228,143,12)" fg:x="9932" fg:w="234"/><text x="52.4797%" y="175.50"></text></g><g><title>ucp_tag_rndv_process_rts (275 samples, 1.45%)</title><rect x="52.0404%" y="197" width="1.4462%" height="15" fill="rgb(249,149,8)" fg:x="9896" fg:w="275"/><text x="52.2904%" y="207.50"></text></g><g><title>ucp_rndv_receive (259 samples, 1.36%)</title><rect x="52.1245%" y="181" width="1.3620%" height="15" fill="rgb(243,35,44)" fg:x="9912" fg:w="259"/><text x="52.3745%" y="191.50"></text></g><g><title>pthread_spin_lock (5 samples, 0.03%)</title><rect x="53.4602%" y="165" width="0.0263%" height="15" fill="rgb(246,89,9)" fg:x="10166" fg:w="5"/><text x="53.7102%" y="175.50"></text></g><g><title>&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress (9,221 samples, 48.49%)</title><rect x="5.3113%" y="245" width="48.4907%" height="15" fill="rgb(233,213,13)" fg:x="1010" fg:w="9221"/><text x="5.5613%" y="255.50">&lt;mpicd::message::PackRecvMessage as mpicd::message::Message&gt;::progress</text></g><g><title>ucp_worker_progress (7,830 samples, 41.18%)</title><rect x="12.6262%" y="229" width="41.1759%" height="15" fill="rgb(233,141,41)" fg:x="2401" fg:w="7830"/><text x="12.8762%" y="239.50">ucp_worker_progress</text></g><g><title>[libuct_ib.so.0.0.0] (7,658 samples, 40.27%)</title><rect x="13.5307%" y="213" width="40.2714%" height="15" fill="rgb(239,167,4)" fg:x="2573" fg:w="7658"/><text x="13.7807%" y="223.50">[libuct_ib.so.0.0.0]</text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (59 samples, 0.31%)</title><rect x="53.4918%" y="197" width="0.3103%" height="15" fill="rgb(209,217,16)" fg:x="10172" fg:w="59"/><text x="53.7418%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (18 samples, 0.09%)</title><rect x="53.9020%" y="213" width="0.0947%" height="15" fill="rgb(219,88,35)" fg:x="10250" fg:w="18"/><text x="54.1520%" y="223.50"></text></g><g><title>uct_rc_mlx5_ep_am_bcopy (15 samples, 0.08%)</title><rect x="53.9178%" y="197" width="0.0789%" height="15" fill="rgb(220,193,23)" fg:x="10253" fg:w="15"/><text x="54.1678%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.02%)</title><rect x="53.9756%" y="181" width="0.0210%" height="15" fill="rgb(230,90,52)" fg:x="10264" fg:w="4"/><text x="54.2256%" y="191.50"></text></g><g><title>ucp_dt_pack (4 samples, 0.02%)</title><rect x="53.9756%" y="165" width="0.0210%" height="15" fill="rgb(252,106,19)" fg:x="10264" fg:w="4"/><text x="54.2256%" y="175.50"></text></g><g><title>ucp_tag_send_nbx (33 samples, 0.17%)</title><rect x="53.8389%" y="229" width="0.1735%" height="15" fill="rgb(206,74,20)" fg:x="10238" fg:w="33"/><text x="54.0889%" y="239.50"></text></g><g><title>ucp_request_send_start (3 samples, 0.02%)</title><rect x="53.9966%" y="213" width="0.0158%" height="15" fill="rgb(230,138,44)" fg:x="10268" fg:w="3"/><text x="54.2466%" y="223.50"></text></g><g><title>&lt;mpicd::message::PackSendMessage as mpicd::message::Message&gt;::progress (41 samples, 0.22%)</title><rect x="53.8021%" y="245" width="0.2156%" height="15" fill="rgb(235,182,43)" fg:x="10231" fg:w="41"/><text x="54.0521%" y="255.50"></text></g><g><title>&lt;mpicd::request::Request as core::ops::drop::Drop&gt;::drop (14 samples, 0.07%)</title><rect x="54.1071%" y="229" width="0.0736%" height="15" fill="rgb(242,16,51)" fg:x="10289" fg:w="14"/><text x="54.3571%" y="239.50"></text></g><g><title>ucp_request_free (12 samples, 0.06%)</title><rect x="54.1176%" y="213" width="0.0631%" height="15" fill="rgb(248,9,4)" fg:x="10291" fg:w="12"/><text x="54.3676%" y="223.50"></text></g><g><title>_int_free (100 samples, 0.53%)</title><rect x="54.1859%" y="229" width="0.5259%" height="15" fill="rgb(210,31,22)" fg:x="10304" fg:w="100"/><text x="54.4359%" y="239.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="54.7697%" y="213" width="0.0210%" height="15" fill="rgb(239,54,39)" fg:x="10415" fg:w="4"/><text x="55.0197%" y="223.50"></text></g><g><title>_int_free (223 samples, 1.17%)</title><rect x="54.7907%" y="213" width="1.1727%" height="15" fill="rgb(230,99,41)" fg:x="10419" fg:w="223"/><text x="55.0407%" y="223.50"></text></g><g><title>unlink_chunk.isra.2 (9 samples, 0.05%)</title><rect x="55.9161%" y="197" width="0.0473%" height="15" fill="rgb(253,106,12)" fg:x="10633" fg:w="9"/><text x="56.1661%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::message::PackRecvMessage&gt; (280 samples, 1.47%)</title><rect x="54.7118%" y="229" width="1.4724%" height="15" fill="rgb(213,46,41)" fg:x="10404" fg:w="280"/><text x="54.9618%" y="239.50"></text></g><g><title>free (42 samples, 0.22%)</title><rect x="55.9634%" y="213" width="0.2209%" height="15" fill="rgb(215,133,35)" fg:x="10642" fg:w="42"/><text x="56.2134%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;mpicd::message::PackSendMessage&gt; (4 samples, 0.02%)</title><rect x="56.1843%" y="229" width="0.0210%" height="15" fill="rgb(213,28,5)" fg:x="10684" fg:w="4"/><text x="56.4343%" y="239.50"></text></g><g><title>mpicd::Handle::remove_message (425 samples, 2.23%)</title><rect x="54.0177%" y="245" width="2.2350%" height="15" fill="rgb(215,77,49)" fg:x="10272" fg:w="425"/><text x="54.2677%" y="255.50">m..</text></g><g><title>free (9 samples, 0.05%)</title><rect x="56.2053%" y="229" width="0.0473%" height="15" fill="rgb(248,100,22)" fg:x="10688" fg:w="9"/><text x="56.4553%" y="239.50"></text></g><g><title>[libucp.so.0.0.0] (58 samples, 0.31%)</title><rect x="56.9468%" y="229" width="0.3050%" height="15" fill="rgb(208,67,9)" fg:x="10829" fg:w="58"/><text x="57.1968%" y="239.50"></text></g><g><title>pthread_self@GLIBC_2.17 (5 samples, 0.03%)</title><rect x="66.3915%" y="213" width="0.0263%" height="15" fill="rgb(219,133,21)" fg:x="12625" fg:w="5"/><text x="66.6415%" y="223.50"></text></g><g><title>pthread_spin_lock (237 samples, 1.25%)</title><rect x="66.4178%" y="213" width="1.2463%" height="15" fill="rgb(246,46,29)" fg:x="12630" fg:w="237"/><text x="66.6678%" y="223.50"></text></g><g><title>__aarch64_swp4_acq (14 samples, 0.07%)</title><rect x="67.5905%" y="197" width="0.0736%" height="15" fill="rgb(246,185,52)" fg:x="12853" fg:w="14"/><text x="67.8405%" y="207.50"></text></g><g><title>pthread_spin_unlock (8 samples, 0.04%)</title><rect x="67.6641%" y="213" width="0.0421%" height="15" fill="rgb(252,136,11)" fg:x="12867" fg:w="8"/><text x="67.9141%" y="223.50"></text></g><g><title>[libucp.so.0.0.0] (4 samples, 0.02%)</title><rect x="69.4731%" y="181" width="0.0210%" height="15" fill="rgb(219,138,53)" fg:x="13211" fg:w="4"/><text x="69.7231%" y="191.50"></text></g><g><title>ucp_dt_iov_scatter (5,364 samples, 28.21%)</title><rect x="68.8473%" y="197" width="28.2078%" height="15" fill="rgb(211,51,23)" fg:x="13092" fg:w="5364"/><text x="69.0973%" y="207.50">ucp_dt_iov_scatter</text></g><g><title>__memcpy_thunderx2 (5,241 samples, 27.56%)</title><rect x="69.4941%" y="181" width="27.5610%" height="15" fill="rgb(247,221,28)" fg:x="13215" fg:w="5241"/><text x="69.7441%" y="191.50">__memcpy_thunderx2</text></g><g><title>ucp_rndv_data_handler (5,584 samples, 29.36%)</title><rect x="67.7061%" y="213" width="29.3647%" height="15" fill="rgb(251,222,45)" fg:x="12875" fg:w="5584"/><text x="67.9561%" y="223.50">ucp_rndv_data_handler</text></g><g><title>ucp_request_memory_dereg (3 samples, 0.02%)</title><rect x="97.0551%" y="197" width="0.0158%" height="15" fill="rgb(217,162,53)" fg:x="18456" fg:w="3"/><text x="97.3051%" y="207.50"></text></g><g><title>[libucp.so.0.0.0] (10 samples, 0.05%)</title><rect x="97.4548%" y="133" width="0.0526%" height="15" fill="rgb(229,93,14)" fg:x="18532" fg:w="10"/><text x="97.7048%" y="143.50"></text></g><g><title>__memcpy_thunderx2 (2 samples, 0.01%)</title><rect x="98.5065%" y="117" width="0.0105%" height="15" fill="rgb(209,67,49)" fg:x="18732" fg:w="2"/><text x="98.7565%" y="127.50"></text></g><g><title>ucp_do_am_single (227 samples, 1.19%)</title><rect x="97.3864%" y="149" width="1.1937%" height="15" fill="rgb(213,87,29)" fg:x="18519" fg:w="227"/><text x="97.6364%" y="159.50"></text></g><g><title>uct_rc_mlx5_ep_am_short (204 samples, 1.07%)</title><rect x="97.5074%" y="133" width="1.0728%" height="15" fill="rgb(205,151,52)" fg:x="18542" fg:w="204"/><text x="97.7574%" y="143.50"></text></g><g><title>pthread_spin_lock (12 samples, 0.06%)</title><rect x="98.5170%" y="117" width="0.0631%" height="15" fill="rgb(253,215,39)" fg:x="18734" fg:w="12"/><text x="98.7670%" y="127.50"></text></g><g><title>[libucp.so.0.0.0] (257 samples, 1.35%)</title><rect x="97.2497%" y="181" width="1.3515%" height="15" fill="rgb(221,220,41)" fg:x="18493" fg:w="257"/><text x="97.4997%" y="191.50"></text></g><g><title>ucp_proto_progress_rndv_rtr (235 samples, 1.24%)</title><rect x="97.3654%" y="165" width="1.2358%" height="15" fill="rgb(218,133,21)" fg:x="18515" fg:w="235"/><text x="97.6154%" y="175.50"></text></g><g><title>ucp_rkey_packed_size (4 samples, 0.02%)</title><rect x="98.5801%" y="149" width="0.0210%" height="15" fill="rgb(221,193,43)" fg:x="18746" fg:w="4"/><text x="98.8301%" y="159.50"></text></g><g><title>ucp_rndv_receive (275 samples, 1.45%)</title><rect x="97.1866%" y="197" width="1.4462%" height="15" fill="rgb(240,128,52)" fg:x="18481" fg:w="275"/><text x="97.4366%" y="207.50"></text></g><g><title>pthread_spin_lock (5 samples, 0.03%)</title><rect x="98.6064%" y="181" width="0.0263%" height="15" fill="rgb(253,114,12)" fg:x="18751" fg:w="5"/><text x="98.8564%" y="191.50"></text></g><g><title>ucp_tag_rndv_process_rts (298 samples, 1.57%)</title><rect x="97.0709%" y="213" width="1.5671%" height="15" fill="rgb(215,223,47)" fg:x="18459" fg:w="298"/><text x="97.3209%" y="223.50"></text></g><g><title>uct_rc_iface_fc_handler (5 samples, 0.03%)</title><rect x="98.6380%" y="213" width="0.0263%" height="15" fill="rgb(248,225,23)" fg:x="18757" fg:w="5"/><text x="98.8880%" y="223.50"></text></g><g><title>uct_rc_mlx5_iface_srq_post_recv (53 samples, 0.28%)</title><rect x="98.6643%" y="213" width="0.2787%" height="15" fill="rgb(250,108,0)" fg:x="18762" fg:w="53"/><text x="98.9143%" y="223.50"></text></g><g><title>&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall (18,165 samples, 95.52%)</title><rect x="3.4234%" y="261" width="95.5248%" height="15" fill="rgb(228,208,7)" fg:x="651" fg:w="18165"/><text x="3.6734%" y="271.50">&lt;mpicd::context::Context as mpicd::communicator::Communicator&gt;::waitall</text></g><g><title>ucp_worker_progress (8,119 samples, 42.70%)</title><rect x="56.2526%" y="245" width="42.6956%" height="15" fill="rgb(244,45,10)" fg:x="10697" fg:w="8119"/><text x="56.5026%" y="255.50">ucp_worker_progress</text></g><g><title>[libuct_ib.so.0.0.0] (7,929 samples, 41.70%)</title><rect x="57.2518%" y="229" width="41.6965%" height="15" fill="rgb(207,125,25)" fg:x="10887" fg:w="7929"/><text x="57.5018%" y="239.50">[libuct_ib.so.0.0.0]</text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="98.9535%" y="261" width="0.0263%" height="15" fill="rgb(210,195,18)" fg:x="18817" fg:w="5"/><text x="99.2035%" y="271.50"></text></g><g><title>unlink_chunk.isra.2 (2 samples, 0.01%)</title><rect x="98.9693%" y="245" width="0.0105%" height="15" fill="rgb(249,80,12)" fg:x="18820" fg:w="2"/><text x="99.2193%" y="255.50"></text></g><g><title>__memcpy_generic (2 samples, 0.01%)</title><rect x="99.0324%" y="197" width="0.0105%" height="15" fill="rgb(221,65,9)" fg:x="18832" fg:w="2"/><text x="99.2824%" y="207.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="99.0429%" y="197" width="0.0263%" height="15" fill="rgb(235,49,36)" fg:x="18834" fg:w="5"/><text x="99.2929%" y="207.50"></text></g><g><title>__libc_realloc (55 samples, 0.29%)</title><rect x="98.9903%" y="229" width="0.2892%" height="15" fill="rgb(225,32,20)" fg:x="18824" fg:w="55"/><text x="99.2403%" y="239.50"></text></g><g><title>_int_realloc (50 samples, 0.26%)</title><rect x="99.0166%" y="213" width="0.2629%" height="15" fill="rgb(215,141,46)" fg:x="18829" fg:w="50"/><text x="99.2666%" y="223.50"></text></g><g><title>_int_malloc (40 samples, 0.21%)</title><rect x="99.0692%" y="197" width="0.2103%" height="15" fill="rgb(250,160,47)" fg:x="18839" fg:w="40"/><text x="99.3192%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (59 samples, 0.31%)</title><rect x="98.9798%" y="261" width="0.3103%" height="15" fill="rgb(216,222,40)" fg:x="18822" fg:w="59"/><text x="99.2298%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (57 samples, 0.30%)</title><rect x="98.9903%" y="245" width="0.2997%" height="15" fill="rgb(234,217,39)" fg:x="18824" fg:w="57"/><text x="99.2403%" y="255.50"></text></g><g><title>__rdl_realloc (2 samples, 0.01%)</title><rect x="99.2796%" y="229" width="0.0105%" height="15" fill="rgb(207,178,40)" fg:x="18879" fg:w="2"/><text x="99.5296%" y="239.50"></text></g><g><title>&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body (18,523 samples, 97.41%)</title><rect x="1.8879%" y="277" width="97.4074%" height="15" fill="rgb(221,136,13)" fg:x="359" fg:w="18523"/><text x="2.1379%" y="287.50">&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::body</text></g><g><title>&lt;mpicd_bw::Benchmark&lt;R,C&gt; as mpicd_rust_benchmarks::bw::BandwidthBenchmark&gt;::init (3 samples, 0.02%)</title><rect x="99.2953%" y="277" width="0.0158%" height="15" fill="rgb(249,199,10)" fg:x="18882" fg:w="3"/><text x="99.5453%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="99.2953%" y="261" width="0.0158%" height="15" fill="rgb(249,222,13)" fg:x="18882" fg:w="3"/><text x="99.5453%" y="271.50"></text></g><g><title>mpicd_rust_benchmarks::datatype::StructVecArray::new (3 samples, 0.02%)</title><rect x="99.2953%" y="245" width="0.0158%" height="15" fill="rgb(244,185,38)" fg:x="18882" fg:w="3"/><text x="99.5453%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (6 samples, 0.03%)</title><rect x="99.3111%" y="277" width="0.0316%" height="15" fill="rgb(236,202,9)" fg:x="18885" fg:w="6"/><text x="99.5611%" y="287.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (5 samples, 0.03%)</title><rect x="99.3164%" y="261" width="0.0263%" height="15" fill="rgb(250,229,37)" fg:x="18886" fg:w="5"/><text x="99.5664%" y="271.50"></text></g><g><title>__kernel_clock_gettime (4 samples, 0.02%)</title><rect x="99.3216%" y="245" width="0.0210%" height="15" fill="rgb(206,174,23)" fg:x="18887" fg:w="4"/><text x="99.5716%" y="255.50"></text></g><g><title>__libc_start_main (18,624 samples, 97.94%)</title><rect x="1.4093%" y="389" width="97.9386%" height="15" fill="rgb(211,33,43)" fg:x="268" fg:w="18624"/><text x="1.6593%" y="399.50">__libc_start_main</text></g><g><title>main (18,623 samples, 97.93%)</title><rect x="1.4146%" y="373" width="97.9333%" height="15" fill="rgb(245,58,50)" fg:x="269" fg:w="18623"/><text x="1.6646%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (18,623 samples, 97.93%)</title><rect x="1.4146%" y="357" width="97.9333%" height="15" fill="rgb(244,68,36)" fg:x="269" fg:w="18623"/><text x="1.6646%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (18,623 samples, 97.93%)</title><rect x="1.4146%" y="341" width="97.9333%" height="15" fill="rgb(232,229,15)" fg:x="269" fg:w="18623"/><text x="1.6646%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,623 samples, 97.93%)</title><rect x="1.4146%" y="325" width="97.9333%" height="15" fill="rgb(254,30,23)" fg:x="269" fg:w="18623"/><text x="1.6646%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mpicd_bw::main (18,623 samples, 97.93%)</title><rect x="1.4146%" y="309" width="97.9333%" height="15" fill="rgb(235,160,14)" fg:x="269" fg:w="18623"/><text x="1.6646%" y="319.50">mpicd_bw::main</text></g><g><title>mpicd_rust_benchmarks::bw::bw (18,540 samples, 97.50%)</title><rect x="1.8511%" y="293" width="97.4968%" height="15" fill="rgb(212,155,44)" fg:x="352" fg:w="18540"/><text x="2.1011%" y="303.50">mpicd_rust_benchmarks::bw::bw</text></g><g><title>_dl_start_final (7 samples, 0.04%)</title><rect x="99.3584%" y="373" width="0.0368%" height="15" fill="rgb(226,2,50)" fg:x="18894" fg:w="7"/><text x="99.6084%" y="383.50"></text></g><g><title>_dl_sysdep_start (7 samples, 0.04%)</title><rect x="99.3584%" y="357" width="0.0368%" height="15" fill="rgb(234,177,6)" fg:x="18894" fg:w="7"/><text x="99.6084%" y="367.50"></text></g><g><title>dl_main (6 samples, 0.03%)</title><rect x="99.3637%" y="341" width="0.0316%" height="15" fill="rgb(217,24,9)" fg:x="18895" fg:w="6"/><text x="99.6137%" y="351.50"></text></g><g><title>_dl_relocate_object (5 samples, 0.03%)</title><rect x="99.3690%" y="325" width="0.0263%" height="15" fill="rgb(220,13,46)" fg:x="18896" fg:w="5"/><text x="99.6190%" y="335.50"></text></g><g><title>elf_dynamic_do_Rela (5 samples, 0.03%)</title><rect x="99.3690%" y="309" width="0.0263%" height="15" fill="rgb(239,221,27)" fg:x="18896" fg:w="5"/><text x="99.6190%" y="319.50"></text></g><g><title>elf_machine_rela (5 samples, 0.03%)</title><rect x="99.3690%" y="293" width="0.0263%" height="15" fill="rgb(222,198,25)" fg:x="18896" fg:w="5"/><text x="99.6190%" y="303.50"></text></g><g><title>_dl_lookup_symbol_x (4 samples, 0.02%)</title><rect x="99.3742%" y="277" width="0.0210%" height="15" fill="rgb(211,99,13)" fg:x="18897" fg:w="4"/><text x="99.6242%" y="287.50"></text></g><g><title>do_lookup_x (2 samples, 0.01%)</title><rect x="99.3847%" y="261" width="0.0105%" height="15" fill="rgb(232,111,31)" fg:x="18899" fg:w="2"/><text x="99.6347%" y="271.50"></text></g><g><title>_start (18,636 samples, 98.00%)</title><rect x="1.3988%" y="421" width="98.0017%" height="15" fill="rgb(245,82,37)" fg:x="266" fg:w="18636"/><text x="1.6488%" y="431.50">_start</text></g><g><title>_start (18,634 samples, 97.99%)</title><rect x="1.4093%" y="405" width="97.9912%" height="15" fill="rgb(227,149,46)" fg:x="268" fg:w="18634"/><text x="1.6593%" y="415.50">_start</text></g><g><title>_dl_start (10 samples, 0.05%)</title><rect x="99.3479%" y="389" width="0.0526%" height="15" fill="rgb(218,36,50)" fg:x="18892" fg:w="10"/><text x="99.5979%" y="399.50"></text></g><g><title>calloc@plt (4 samples, 0.02%)</title><rect x="99.4005%" y="421" width="0.0210%" height="15" fill="rgb(226,80,48)" fg:x="18902" fg:w="4"/><text x="99.6505%" y="431.50"></text></g><g><title>free@plt (8 samples, 0.04%)</title><rect x="99.4268%" y="421" width="0.0421%" height="15" fill="rgb(238,224,15)" fg:x="18907" fg:w="8"/><text x="99.6768%" y="431.50"></text></g><g><title>malloc@plt (4 samples, 0.02%)</title><rect x="99.4741%" y="421" width="0.0210%" height="15" fill="rgb(241,136,10)" fg:x="18916" fg:w="4"/><text x="99.7241%" y="431.50"></text></g><g><title>realloc@plt (3 samples, 0.02%)</title><rect x="99.5004%" y="421" width="0.0158%" height="15" fill="rgb(208,32,45)" fg:x="18921" fg:w="3"/><text x="99.7504%" y="431.50"></text></g><g><title>epoll_dispatch (6 samples, 0.03%)</title><rect x="99.5583%" y="357" width="0.0316%" height="15" fill="rgb(207,135,9)" fg:x="18932" fg:w="6"/><text x="99.8083%" y="367.50"></text></g><g><title>epoll_pwait (5 samples, 0.03%)</title><rect x="99.5635%" y="341" width="0.0263%" height="15" fill="rgb(206,86,44)" fg:x="18933" fg:w="5"/><text x="99.8135%" y="351.50"></text></g><g><title>__libc_disable_asynccancel (4 samples, 0.02%)</title><rect x="99.5688%" y="325" width="0.0210%" height="15" fill="rgb(245,177,15)" fg:x="18934" fg:w="4"/><text x="99.8188%" y="335.50"></text></g><g><title>thread_start (15 samples, 0.08%)</title><rect x="99.5162%" y="421" width="0.0789%" height="15" fill="rgb(206,64,50)" fg:x="18924" fg:w="15"/><text x="99.7662%" y="431.50"></text></g><g><title>start_thread (14 samples, 0.07%)</title><rect x="99.5215%" y="405" width="0.0736%" height="15" fill="rgb(234,36,40)" fg:x="18925" fg:w="14"/><text x="99.7715%" y="415.50"></text></g><g><title>progress_engine (8 samples, 0.04%)</title><rect x="99.5530%" y="389" width="0.0421%" height="15" fill="rgb(213,64,8)" fg:x="18931" fg:w="8"/><text x="99.8030%" y="399.50"></text></g><g><title>event_base_loop (8 samples, 0.04%)</title><rect x="99.5530%" y="373" width="0.0421%" height="15" fill="rgb(210,75,36)" fg:x="18931" fg:w="8"/><text x="99.8030%" y="383.50"></text></g><g><title>ucp_dt_pack (2 samples, 0.01%)</title><rect x="99.6003%" y="421" width="0.0105%" height="15" fill="rgb(229,88,21)" fg:x="18940" fg:w="2"/><text x="99.8503%" y="431.50"></text></g><g><title>ucp_dt_iov_gather@plt (2 samples, 0.01%)</title><rect x="99.6003%" y="405" width="0.0105%" height="15" fill="rgb(252,204,47)" fg:x="18940" fg:w="2"/><text x="99.8503%" y="415.50"></text></g><g><title>ucp_do_am_single@plt (9 samples, 0.05%)</title><rect x="99.6109%" y="405" width="0.0473%" height="15" fill="rgb(208,77,27)" fg:x="18942" fg:w="9"/><text x="99.8609%" y="415.50"></text></g><g><title>ucp_proto_progress_rndv_rtr (14 samples, 0.07%)</title><rect x="99.6109%" y="421" width="0.0736%" height="15" fill="rgb(221,76,26)" fg:x="18942" fg:w="14"/><text x="99.8609%" y="431.50"></text></g><g><title>ucp_rkey_packed_size@plt (5 samples, 0.03%)</title><rect x="99.6582%" y="405" width="0.0263%" height="15" fill="rgb(225,139,18)" fg:x="18951" fg:w="5"/><text x="99.9082%" y="415.50"></text></g><g><title>ucp_request_free@plt (3 samples, 0.02%)</title><rect x="99.6845%" y="421" width="0.0158%" height="15" fill="rgb(230,137,11)" fg:x="18956" fg:w="3"/><text x="99.9345%" y="431.50"></text></g><g><title>ucp_dt_iov_scatter@plt (15 samples, 0.08%)</title><rect x="99.7003%" y="405" width="0.0789%" height="15" fill="rgb(212,28,1)" fg:x="18959" fg:w="15"/><text x="99.9503%" y="415.50"></text></g><g><title>ucp_rndv_data_handler (21 samples, 0.11%)</title><rect x="99.7003%" y="421" width="0.1104%" height="15" fill="rgb(248,164,17)" fg:x="18959" fg:w="21"/><text x="99.9503%" y="431.50"></text></g><g><title>ucp_request_memory_dereg@plt (6 samples, 0.03%)</title><rect x="99.7791%" y="405" width="0.0316%" height="15" fill="rgb(222,171,42)" fg:x="18974" fg:w="6"/><text x="100.0291%" y="415.50"></text></g><g><title>ucp_rndv_receive (2 samples, 0.01%)</title><rect x="99.8107%" y="421" width="0.0105%" height="15" fill="rgb(243,84,45)" fg:x="18980" fg:w="2"/><text x="100.0607%" y="431.50"></text></g><g><title>ucp_tag_recv_nbx@plt (6 samples, 0.03%)</title><rect x="99.8212%" y="421" width="0.0316%" height="15" fill="rgb(252,49,23)" fg:x="18982" fg:w="6"/><text x="100.0712%" y="431.50"></text></g><g><title>ucp_tag_rndv_process_rts (2 samples, 0.01%)</title><rect x="99.8528%" y="421" width="0.0105%" height="15" fill="rgb(215,19,7)" fg:x="18988" fg:w="2"/><text x="100.1028%" y="431.50"></text></g><g><title>ucp_tag_send_nbx (2 samples, 0.01%)</title><rect x="99.8633%" y="421" width="0.0105%" height="15" fill="rgb(238,81,41)" fg:x="18990" fg:w="2"/><text x="100.1133%" y="431.50"></text></g><g><title>ucp_request_send_start@plt (2 samples, 0.01%)</title><rect x="99.8633%" y="405" width="0.0105%" height="15" fill="rgb(210,199,37)" fg:x="18990" fg:w="2"/><text x="100.1133%" y="415.50"></text></g><g><title>ucp_worker_progress@plt (23 samples, 0.12%)</title><rect x="99.8738%" y="421" width="0.1210%" height="15" fill="rgb(244,192,49)" fg:x="18992" fg:w="23"/><text x="100.1238%" y="431.50"></text></g><g><title>all (19,016 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="19016"/><text x="0.2500%" y="463.50"></text></g><g><title>mpicd_bw (18,929 samples, 99.54%)</title><rect x="0.4575%" y="437" width="99.5425%" height="15" fill="rgb(236,162,54)" fg:x="87" fg:w="18929"/><text x="0.7075%" y="447.50">mpicd_bw</text></g></svg></svg>